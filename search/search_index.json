{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview In this workshop we start by guiding you through tagging your resources and maintaining an asset inventory for visibility and governance purposes with AWS Tags and Systems Manager (SSM) . We then build an Amazon Machine Image (AMI) baking pipeline, harden the AMI with AWS SSM and install the Amazon Inspector agent. Within the pipeline we look for vulnerabilities and apply patches before promoting the AMI for use by an application. Next we construct a continuous detection framework to detect change in state of security or detection of vulnerabilities using Amazon Inspector and AWS SSM\u2019s Patch Manager. Finally we put all these pieces together to manage your Amazon EC2 fleet at scale. Level : Intermediate Duration : 2 - 3 hours CSF Functions : Identity, Protect, Detect, Respond, Recover CAF Components : Detective, Responsive Prerequisites : AWS Account, IAM User (with admin permissions) Presentation Deck N/A Region Please use the us-east-2 (Ohio) region for this workshop. Modules This workshop is broken up into the four modules below: Asset Management and Tagging AMI Factory Vulnerability Assessment and Patch Manager Setup EC2 Fleet Management at Scale","title":"Overview"},{"location":"#overview","text":"In this workshop we start by guiding you through tagging your resources and maintaining an asset inventory for visibility and governance purposes with AWS Tags and Systems Manager (SSM) . We then build an Amazon Machine Image (AMI) baking pipeline, harden the AMI with AWS SSM and install the Amazon Inspector agent. Within the pipeline we look for vulnerabilities and apply patches before promoting the AMI for use by an application. Next we construct a continuous detection framework to detect change in state of security or detection of vulnerabilities using Amazon Inspector and AWS SSM\u2019s Patch Manager. Finally we put all these pieces together to manage your Amazon EC2 fleet at scale. Level : Intermediate Duration : 2 - 3 hours CSF Functions : Identity, Protect, Detect, Respond, Recover CAF Components : Detective, Responsive Prerequisites : AWS Account, IAM User (with admin permissions)","title":"Overview"},{"location":"#presentation-deck","text":"N/A","title":"Presentation Deck"},{"location":"#region","text":"Please use the us-east-2 (Ohio) region for this workshop.","title":"Region"},{"location":"#modules","text":"This workshop is broken up into the four modules below: Asset Management and Tagging AMI Factory Vulnerability Assessment and Patch Manager Setup EC2 Fleet Management at Scale","title":"Modules"},{"location":"contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. Code of Conduct This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing"},{"location":"contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"contribute/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"contribute/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"contribute/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.","title":"Finding contributions to work on"},{"location":"contribute/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"contribute/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"contribute/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"license/","text":"License MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"module1/","text":"Asset Management Knowing your environment is a key factor in driving your vulnerability program. After all, you want to know where vulnerabilities increase your attack surface and you also want to avoid the risk of an unknown asset introducing vulnerabilities to your environment. The journey starts with planning on: How you want to identify your assets in AWS? In this module we will use tags to identify and classify our AWS resources using Lambda and CloudWatch Events to automaticlly tag new EC2 instances as they are launched manually or by Auto Scaling. How do you track your assets on AWS? We will use Resource Data Sync to gather inventory data in an S3 bucket which we can monitor and analyze. Then you will see how Resource Groups can be used to organize, manage and automate tasks on large numbers of resources at one time. AWS Service/Feature Coverage : CloudWatch Lambda EC2 Resource Groups Automatically Tag Amazon EC2 Resources Tags are the building blocks of cloud resource reports and a key element of a cloud governance framework. Organizations that are most effective in their use of tags typically create business-relevant tag groupings to organize their resources along technical, business, and security dimensions. In this exercise, you will automatically tag EC2 resources created by Auto Scaling or launched manually in response to API Events using CloudWatch Events. This solution can be used by central IT teams in an organization to automatically tag EC2 resources created by their users for cost management and security purposes. The AutoTag function will Tag the instances with: Owner: IAM User PrincipalId: IAM User aws:userid value. OS type: Linux, Windows (This is useful in typical integrations with on-premise CMDBs) The solution here consists of a lambda function that monitors for CloudTrail API events from EC2 and Autoscaling service for the appropriate events. On receiving the event the Lambda function processes the event info and extracts the user identity fields to tags EC2 instances and related resources. The lambda function creates tags with key of \u201cOwner\u201d and value of \u201cusername\u201d which is the user id of the IAM user that launched the EC2 instances or the Autoscaling group. Deploy the solution Click here if you're running this individually in your own AWS Account Launch the CloudFormation stack below to setup the Auto Tagging Solution: Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above (right click and open in a new tab). This will automatically take you to the console to run the template. Click Next on the Specify Template section. On the Specify Details step click Next . Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . The solution in action Now that you have deployed the required automation infrastructure, deploy two new EC2 instances - One Windows 2016, one Amazon Linux 2 and validate that tagging works. Launch without a keypair since we are only validating that the autotagging works. Similarly for the Windows Instance we can see the AutoTag automation in action Take note of the value for the Owner Tag for your EC2 Instances while in the console Now that you know you can tag resources with a Lambda function in response to events, you can apply the same logic to other resources such as Amazon Relational Database Service (RDS) databases or S3 buckets. Additionally, tags are useful in custom billing reports to project costs and determine how much money each individual owner is spending. You can activate the Owner tag in the billing console from the Cost Allocation Tags of your billing console to include it in your detailed billing reports. For more information, see Applying Tags Using AWS Systems Manager Inventory with Tags Next, we want to analyze our inventory based on tags and Resource Data Sync. Creating a Resource Group You can use resource groups to organize your AWS resources. Resource groups make it easier to manage and automate tasks on large numbers of resources at one time. This guide shows you how to create and manage resource groups in AWS Resource Groups. To work with resource groups on the AWS Management Console home Sign in to the AWS Management Console and go to AWS Systems Manager. On the navigation bar under Application Management , choose Resource Groups . On the Resource Groups page click Create a resource group Select AWS::EC2::Instance with the Key-Value pair of Owner and the owner name of the instances you want to group together. Typically this might be an application-ID or layer in the stack such as Web Server, App Servers, etc. Enter a Group name for the resources you are creating a group for. Suggested name would be something like prod-Application-xyz, dev-BusinessUnit-abc. Click Create Group . You can now find your group under the Saved Resource Groups in the Navigation bar. Takeaway Tags are a great way to organize AWS resources in the AWS Management Console. You can configure tags to be displayed with resources and can search and filter by tag. By default, the AWS Management Console is organized by AWS service. However, the Resource Groups tool allows customers to create a custom console that organizes and consolidates AWS resources based on one or more tags or portions of tags. Using this tool, customers can consolidate and view data for applications that consist of multiple services and resources in one place. Naming Convention Recommendations It is recommended that tag names follow the form: \u201corgname:source:tag-name\u201d , consisting of the following components: \u201corgname:\u201d prefix : To clearly differentiate Org-defined tags from tags defined by AWS, or required by third-party tools that the Org may employ \u201csource:\u201d component : Which will only be used for tag values sourced from an integration with a data source such as the Org\u2019s Configuration Management Database (CMDB) via automation \u201ctag-name\u201d : Which will use a hyphen character (\"-\") to separate words within the name Required Tags The tags listed below are based on numerous AWS Professional Services engagements on AWS resource governance with enterprise customers with across a large variety of applications and products. The following tags have been identified, as a starting point for organizations looking to enhance governance through tagging. These tags should be included as inputs or preset values in CloudFormation templates. Tag Description Name Standard AWS tag, displayed in the AWS Management Console. orgname:entity Identifies whether the resource is for the Organization, for the Business unit, or shared. orgname:charge-code Identifies the method by which costs will be charged back to the resource consumer. For example, there could be four request type values: \u201ccmdbid-application\u201d, \u201cbu-product\u201d, \u201cproject\u201d, or \u201cdirect-request\u201d. orgname:aws-budget-name Identifies the AWS Budget name for the Charge Code. orgname:environment-type Identifies whether the resource is part of a production or non-production type of environment. orgname:resource-owner-email Identifies the email address for the individual or group that owns the resource. References For more details on tagging strategies see AWS Tagging Strategies","title":"Module 1: Asset Management"},{"location":"module1/#asset-management","text":"Knowing your environment is a key factor in driving your vulnerability program. After all, you want to know where vulnerabilities increase your attack surface and you also want to avoid the risk of an unknown asset introducing vulnerabilities to your environment. The journey starts with planning on: How you want to identify your assets in AWS? In this module we will use tags to identify and classify our AWS resources using Lambda and CloudWatch Events to automaticlly tag new EC2 instances as they are launched manually or by Auto Scaling. How do you track your assets on AWS? We will use Resource Data Sync to gather inventory data in an S3 bucket which we can monitor and analyze. Then you will see how Resource Groups can be used to organize, manage and automate tasks on large numbers of resources at one time. AWS Service/Feature Coverage : CloudWatch Lambda EC2 Resource Groups","title":"Asset Management"},{"location":"module1/#automatically-tag-amazon-ec2-resources","text":"Tags are the building blocks of cloud resource reports and a key element of a cloud governance framework. Organizations that are most effective in their use of tags typically create business-relevant tag groupings to organize their resources along technical, business, and security dimensions. In this exercise, you will automatically tag EC2 resources created by Auto Scaling or launched manually in response to API Events using CloudWatch Events. This solution can be used by central IT teams in an organization to automatically tag EC2 resources created by their users for cost management and security purposes. The AutoTag function will Tag the instances with: Owner: IAM User PrincipalId: IAM User aws:userid value. OS type: Linux, Windows (This is useful in typical integrations with on-premise CMDBs) The solution here consists of a lambda function that monitors for CloudTrail API events from EC2 and Autoscaling service for the appropriate events. On receiving the event the Lambda function processes the event info and extracts the user identity fields to tags EC2 instances and related resources. The lambda function creates tags with key of \u201cOwner\u201d and value of \u201cusername\u201d which is the user id of the IAM user that launched the EC2 instances or the Autoscaling group.","title":"Automatically Tag Amazon EC2 Resources"},{"location":"module1/#deploy-the-solution","text":"Click here if you're running this individually in your own AWS Account Launch the CloudFormation stack below to setup the Auto Tagging Solution: Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above (right click and open in a new tab). This will automatically take you to the console to run the template. Click Next on the Specify Template section. On the Specify Details step click Next . Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE .","title":"Deploy the solution"},{"location":"module1/#the-solution-in-action","text":"Now that you have deployed the required automation infrastructure, deploy two new EC2 instances - One Windows 2016, one Amazon Linux 2 and validate that tagging works. Launch without a keypair since we are only validating that the autotagging works. Similarly for the Windows Instance we can see the AutoTag automation in action Take note of the value for the Owner Tag for your EC2 Instances while in the console Now that you know you can tag resources with a Lambda function in response to events, you can apply the same logic to other resources such as Amazon Relational Database Service (RDS) databases or S3 buckets. Additionally, tags are useful in custom billing reports to project costs and determine how much money each individual owner is spending. You can activate the Owner tag in the billing console from the Cost Allocation Tags of your billing console to include it in your detailed billing reports. For more information, see Applying Tags","title":"The solution in action"},{"location":"module1/#using-aws-systems-manager-inventory-with-tags","text":"Next, we want to analyze our inventory based on tags and Resource Data Sync. Creating a Resource Group You can use resource groups to organize your AWS resources. Resource groups make it easier to manage and automate tasks on large numbers of resources at one time. This guide shows you how to create and manage resource groups in AWS Resource Groups. To work with resource groups on the AWS Management Console home Sign in to the AWS Management Console and go to AWS Systems Manager. On the navigation bar under Application Management , choose Resource Groups . On the Resource Groups page click Create a resource group Select AWS::EC2::Instance with the Key-Value pair of Owner and the owner name of the instances you want to group together. Typically this might be an application-ID or layer in the stack such as Web Server, App Servers, etc. Enter a Group name for the resources you are creating a group for. Suggested name would be something like prod-Application-xyz, dev-BusinessUnit-abc. Click Create Group . You can now find your group under the Saved Resource Groups in the Navigation bar.","title":"Using AWS Systems Manager Inventory with Tags"},{"location":"module1/#takeaway","text":"Tags are a great way to organize AWS resources in the AWS Management Console. You can configure tags to be displayed with resources and can search and filter by tag. By default, the AWS Management Console is organized by AWS service. However, the Resource Groups tool allows customers to create a custom console that organizes and consolidates AWS resources based on one or more tags or portions of tags. Using this tool, customers can consolidate and view data for applications that consist of multiple services and resources in one place. Naming Convention Recommendations It is recommended that tag names follow the form: \u201corgname:source:tag-name\u201d , consisting of the following components: \u201corgname:\u201d prefix : To clearly differentiate Org-defined tags from tags defined by AWS, or required by third-party tools that the Org may employ \u201csource:\u201d component : Which will only be used for tag values sourced from an integration with a data source such as the Org\u2019s Configuration Management Database (CMDB) via automation \u201ctag-name\u201d : Which will use a hyphen character (\"-\") to separate words within the name Required Tags The tags listed below are based on numerous AWS Professional Services engagements on AWS resource governance with enterprise customers with across a large variety of applications and products. The following tags have been identified, as a starting point for organizations looking to enhance governance through tagging. These tags should be included as inputs or preset values in CloudFormation templates. Tag Description Name Standard AWS tag, displayed in the AWS Management Console. orgname:entity Identifies whether the resource is for the Organization, for the Business unit, or shared. orgname:charge-code Identifies the method by which costs will be charged back to the resource consumer. For example, there could be four request type values: \u201ccmdbid-application\u201d, \u201cbu-product\u201d, \u201cproject\u201d, or \u201cdirect-request\u201d. orgname:aws-budget-name Identifies the AWS Budget name for the Charge Code. orgname:environment-type Identifies whether the resource is part of a production or non-production type of environment. orgname:resource-owner-email Identifies the email address for the individual or group that owns the resource. References For more details on tagging strategies see AWS Tagging Strategies","title":"Takeaway"},{"location":"module2/","text":"AMI Factory In a typical enterprise scenario, a cloud team is responsible for providing the core infrastructure services to development teams, which includes creation of approved AMIs with the latest OS updates, hardening requirements, and required third-party software agents. AMI Catalog Decisions AMI design options differ based on the trade-offs of deployment simplicity versus deployment flexibility. The simplest AMIs are fully baked and purpose-built to deploy a complete running instance, including the installation and configuration of all required software. However, this approach limits flexibility, as a fully baked AMI can only be used to deploy a single instance or a farm of identical instances. The most flexible AMIs include only minimal configurations and software, requiring application specific packages to be installed on first boot. This approach trades simplicity for flexibility as each instance must be properly bootstrapped before it can function as intended. The ideal AMI design depends largely on the constraints of the workload. When considering which option is right for your organization, keep the following questions in mind: How quickly do you need to be able to replace a failing instance or add additional compute capacity? Is the workload spikey or static? Does your server configuration require manual provisioning or configuration? Do you need to minimize the complexity of deploying resources to both AWS and on-premises environments? Are there existing server provisioning tools or processes that you are trying to align with AWS? In this exercise, we will build out the scripts needed to configure the AMI as CIS level 1 compliant, validate that the AMI is actually CIS compliant with Amazon Inspector and look for vulnerabilities from the CVE database. We are going with the JeOS (just enough Operating System) option for AMI design. AMI Pipeline Here's a high-level workflow diagram of the golden AMI pipeline: Here's what our AMI pipeline solution looks like that we will be deploying today: Deploying an AMI Pipeline on AWS You can use an AWS Systems Manager (SSM) document to configure the AMI according to your organisation's security standards such as CIS, NIST, etc. An AWS Systems Manager document (SSM document) defines the actions that Systems Manager performs on your managed instances. Systems Manager includes more than a dozen pre-configured documents that you can use by specifying parameters at runtime. Documents use JSON or YAML, and they include steps and parameters that you specify. Set up the golden AMI pipeline environment Click here if you're running this individually in your own AWS Account Launch the CloudFormation stack below to setup the Golden AMI Pipeline Solution: Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above (right click and open in a new tab). This will automatically take you to the console to run the template. Click Next on the Specify Template section. On the Specify Details step enter a valid Email Address and your Role/User. On the Specify Details step, fill in the parameters based on the table below and then click Next . Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . Values are case-sensitive Parameter Default Value Description ApproverARN [REQUIRED] AWS authenticated principals who are able to either approve or reject the Golden AMI. You can specify principals by using an AWS Identity and Access Management (IAM) user name, IAM user ARN, IAM role ARN, or an IAM assume role user ARN. EmailID [REQUIRED] This is the Email ID of the administrator responsible for validating the continuous assessment results buildVersion 1 This is a default version that corresponds to your product. You will override this value when you trigger golden AMI creation/distribution/ decommissioning automation workflow continuousInspection Frequency rate (1 day) This is the frequency at which vulnerability assessment of your active AMIs would take place instanceType t2.large This is the InstanceType that is compatible with all your golden AMIs productName DevOpsAMI-1.0 This is the name of the golden AMI product along with major/minor version number. The syntax of this parameter is ProductName-ProductVersion productOSAndVersion AmazonLinux-2018.11 The syntax of this parameter is OSName-OSVersion. This is the default OS and version number of the OS You will see following parameters in the output. Note the value of the parameters. Parameter Description GoldenAMIAutomationDoc The name of the SSM automation document you can execute for generating a golden AMI DecommissionAMIVersionDoc The name of the SSM automation document you can execute for decommissioning a golden AMI ContinuousInspectionScheduledRule The CloudWatch Events rule that executes continuous vulnerability assessment at the frequency you specified BucketName The name of the Amazon S3 bucket in which you need to upload CloudFormation Template for launching your golden AMI ContinuousAssessmentResultsTopic The SNS topic on which continuous assessment results will be published Create a golden AMI Navigate to Systems Manager console In the navigation panel, choose Automation under Actions & Change drop-down. Choose Execute Automation . Filter the automations by clicking the Owned by me tab. Make sure you are in the Ohio region. Choose the GoldenAMIAutomationDoc document name that you noted in the output tab of CloudFormation stack and click Next. Choose following values: Select Simple Execution Most input parameters will be pre-populated except the sourceAMIid and AMIVersion. We will be querying for the latest AMI IDs using AWS Systems Manager Parameter Store. You can see we have used the Amazon Linux Public AMI Parameter. You can find more information on querying for the latest AMI IDs at the following links Query for the latest Amazon Linux AMI IDs using AWS Systems Manager Parameter Store Query for the Latest Windows AMI Using Systems Manager Parameter Store We do the same with a Windows 2016 Base AMI by following the same steps again. You can leave remaining parameters as it is. Automation document launches instances in a private subnet, with a security group that has no inbound access for launching instances. Next, click on Execute . Info The process may take approximately 30 minutes to 1.5 hours depending upon the available number of updates and scripts executed on the AMI. You can either schedule it to run periodically OR trigger it manually OR trigger it at the end of your CI-CD pipeline. Tip For this lab we recommend using a Amazon Linux 2 AMI. You may choose a Windows AMI as well but in the interest of time, you can move on to the next section of the lab while the automation is working in the background. Here is how the process works: The process takes a source AMI, creates an instance, updates packages, and executes your custom code for hardening the instance and installing required agents. Next, it stops the instance and creates an image from the stopped instance. Since the security posture of an AMI can be assessed based on the security posture of an instance, automation creates an EC2 instance from the newly created golden AMI. It then installs an Amazon Inspector agent on the EC2 instance and triggers an Amazon Inspector assessment. The Amazon Inspector assessment setup evaluates following rules packages: Common Vulnerabilities and Exposures (CVEs) Center for Internet Security (CIS) Benchmarks AWS Security Best Practices Runtime Behavior Analysis Once the assessment is complete, Amazon Inspector records findings and publishes an SNS notification. Since your email-ID was subscribed to the SNS topic, you will receive a notification email containing information like shown below. Review assessment result Navigate to Systems Manager service. Ensure that you are in the correct region (US-East-2). In the navigation panel, choose Parameter Store under Application Management drop-down. Filter parameters by using a Name : begins-with filter and enter the path specified in the notification. Choose the result. Review the Value. The following value suggests that there were security findings found in the AMI. To review findings, open the Inspector service console. The dashboard will display recent assessment runs. Choose the assessment run corresponding to your golden AMI. You can either choose Download report to see details of the finding or you can review the information by choosing the number under the Findings column. Based on what you see, you can choose to Approve or Deny the AMI. If you approved the golden AMI, you will see a new private golden AMI registered under your AMIs in the Amazon EC2 console. Every time you create a new version of the golden AMI, ensure that you have specified a consistent product-name as well as the operating system. We suggest that customers trigger this automation at least every 30 days. This ensures that they are pulling the latest image with updates and patches applied. We then suggest configuring it to your standards and distributing it to your application teams with a sufficient window to test their applications in a staging environment before going live. This pattern of \u201crehydrating\u201d your Production environment with an automated release of an updated full-stack application is called a Blue-Green deployment. At a high level it looks like the image below: You can read more about these design patterns at the following links AWS Blue Green Deployments White Paper Automating Blue/Green Deployments of Infrastructure and Application Code using AMIs, AWS Developer Tools, & Amazon EC2 Systems Manager] Takeaway You have now deployed an AMI baking pipeline that uses AWS Systems Manager (SSM) to configure the base AMI according to your security requirements and assessed it for vulnerabilities. If you approved your AMI, navigate to the EC2 Console: Click Launch Instances Click on My AMIs Select the AMI created by the automation process and launch without a key pair.","title":"Module 2: AMI Factory"},{"location":"module2/#ami-factory","text":"In a typical enterprise scenario, a cloud team is responsible for providing the core infrastructure services to development teams, which includes creation of approved AMIs with the latest OS updates, hardening requirements, and required third-party software agents.","title":"AMI Factory"},{"location":"module2/#ami-catalog-decisions","text":"AMI design options differ based on the trade-offs of deployment simplicity versus deployment flexibility. The simplest AMIs are fully baked and purpose-built to deploy a complete running instance, including the installation and configuration of all required software. However, this approach limits flexibility, as a fully baked AMI can only be used to deploy a single instance or a farm of identical instances. The most flexible AMIs include only minimal configurations and software, requiring application specific packages to be installed on first boot. This approach trades simplicity for flexibility as each instance must be properly bootstrapped before it can function as intended. The ideal AMI design depends largely on the constraints of the workload. When considering which option is right for your organization, keep the following questions in mind: How quickly do you need to be able to replace a failing instance or add additional compute capacity? Is the workload spikey or static? Does your server configuration require manual provisioning or configuration? Do you need to minimize the complexity of deploying resources to both AWS and on-premises environments? Are there existing server provisioning tools or processes that you are trying to align with AWS? In this exercise, we will build out the scripts needed to configure the AMI as CIS level 1 compliant, validate that the AMI is actually CIS compliant with Amazon Inspector and look for vulnerabilities from the CVE database. We are going with the JeOS (just enough Operating System) option for AMI design.","title":"AMI Catalog Decisions"},{"location":"module2/#ami-pipeline","text":"Here's a high-level workflow diagram of the golden AMI pipeline: Here's what our AMI pipeline solution looks like that we will be deploying today:","title":"AMI Pipeline"},{"location":"module2/#deploying-an-ami-pipeline-on-aws","text":"You can use an AWS Systems Manager (SSM) document to configure the AMI according to your organisation's security standards such as CIS, NIST, etc. An AWS Systems Manager document (SSM document) defines the actions that Systems Manager performs on your managed instances. Systems Manager includes more than a dozen pre-configured documents that you can use by specifying parameters at runtime. Documents use JSON or YAML, and they include steps and parameters that you specify.","title":"Deploying an AMI Pipeline on AWS"},{"location":"module2/#set-up-the-golden-ami-pipeline-environment","text":"Click here if you're running this individually in your own AWS Account Launch the CloudFormation stack below to setup the Golden AMI Pipeline Solution: Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above (right click and open in a new tab). This will automatically take you to the console to run the template. Click Next on the Specify Template section. On the Specify Details step enter a valid Email Address and your Role/User. On the Specify Details step, fill in the parameters based on the table below and then click Next . Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . Values are case-sensitive Parameter Default Value Description ApproverARN [REQUIRED] AWS authenticated principals who are able to either approve or reject the Golden AMI. You can specify principals by using an AWS Identity and Access Management (IAM) user name, IAM user ARN, IAM role ARN, or an IAM assume role user ARN. EmailID [REQUIRED] This is the Email ID of the administrator responsible for validating the continuous assessment results buildVersion 1 This is a default version that corresponds to your product. You will override this value when you trigger golden AMI creation/distribution/ decommissioning automation workflow continuousInspection Frequency rate (1 day) This is the frequency at which vulnerability assessment of your active AMIs would take place instanceType t2.large This is the InstanceType that is compatible with all your golden AMIs productName DevOpsAMI-1.0 This is the name of the golden AMI product along with major/minor version number. The syntax of this parameter is ProductName-ProductVersion productOSAndVersion AmazonLinux-2018.11 The syntax of this parameter is OSName-OSVersion. This is the default OS and version number of the OS You will see following parameters in the output. Note the value of the parameters. Parameter Description GoldenAMIAutomationDoc The name of the SSM automation document you can execute for generating a golden AMI DecommissionAMIVersionDoc The name of the SSM automation document you can execute for decommissioning a golden AMI ContinuousInspectionScheduledRule The CloudWatch Events rule that executes continuous vulnerability assessment at the frequency you specified BucketName The name of the Amazon S3 bucket in which you need to upload CloudFormation Template for launching your golden AMI ContinuousAssessmentResultsTopic The SNS topic on which continuous assessment results will be published","title":"Set up the golden AMI pipeline environment"},{"location":"module2/#create-a-golden-ami","text":"Navigate to Systems Manager console In the navigation panel, choose Automation under Actions & Change drop-down. Choose Execute Automation . Filter the automations by clicking the Owned by me tab. Make sure you are in the Ohio region. Choose the GoldenAMIAutomationDoc document name that you noted in the output tab of CloudFormation stack and click Next. Choose following values: Select Simple Execution Most input parameters will be pre-populated except the sourceAMIid and AMIVersion. We will be querying for the latest AMI IDs using AWS Systems Manager Parameter Store. You can see we have used the Amazon Linux Public AMI Parameter. You can find more information on querying for the latest AMI IDs at the following links Query for the latest Amazon Linux AMI IDs using AWS Systems Manager Parameter Store Query for the Latest Windows AMI Using Systems Manager Parameter Store We do the same with a Windows 2016 Base AMI by following the same steps again. You can leave remaining parameters as it is. Automation document launches instances in a private subnet, with a security group that has no inbound access for launching instances. Next, click on Execute . Info The process may take approximately 30 minutes to 1.5 hours depending upon the available number of updates and scripts executed on the AMI. You can either schedule it to run periodically OR trigger it manually OR trigger it at the end of your CI-CD pipeline. Tip For this lab we recommend using a Amazon Linux 2 AMI. You may choose a Windows AMI as well but in the interest of time, you can move on to the next section of the lab while the automation is working in the background. Here is how the process works: The process takes a source AMI, creates an instance, updates packages, and executes your custom code for hardening the instance and installing required agents. Next, it stops the instance and creates an image from the stopped instance. Since the security posture of an AMI can be assessed based on the security posture of an instance, automation creates an EC2 instance from the newly created golden AMI. It then installs an Amazon Inspector agent on the EC2 instance and triggers an Amazon Inspector assessment. The Amazon Inspector assessment setup evaluates following rules packages: Common Vulnerabilities and Exposures (CVEs) Center for Internet Security (CIS) Benchmarks AWS Security Best Practices Runtime Behavior Analysis Once the assessment is complete, Amazon Inspector records findings and publishes an SNS notification. Since your email-ID was subscribed to the SNS topic, you will receive a notification email containing information like shown below.","title":"Create a golden AMI"},{"location":"module2/#review-assessment-result","text":"Navigate to Systems Manager service. Ensure that you are in the correct region (US-East-2). In the navigation panel, choose Parameter Store under Application Management drop-down. Filter parameters by using a Name : begins-with filter and enter the path specified in the notification. Choose the result. Review the Value. The following value suggests that there were security findings found in the AMI. To review findings, open the Inspector service console. The dashboard will display recent assessment runs. Choose the assessment run corresponding to your golden AMI. You can either choose Download report to see details of the finding or you can review the information by choosing the number under the Findings column. Based on what you see, you can choose to Approve or Deny the AMI. If you approved the golden AMI, you will see a new private golden AMI registered under your AMIs in the Amazon EC2 console. Every time you create a new version of the golden AMI, ensure that you have specified a consistent product-name as well as the operating system. We suggest that customers trigger this automation at least every 30 days. This ensures that they are pulling the latest image with updates and patches applied. We then suggest configuring it to your standards and distributing it to your application teams with a sufficient window to test their applications in a staging environment before going live. This pattern of \u201crehydrating\u201d your Production environment with an automated release of an updated full-stack application is called a Blue-Green deployment. At a high level it looks like the image below: You can read more about these design patterns at the following links AWS Blue Green Deployments White Paper Automating Blue/Green Deployments of Infrastructure and Application Code using AMIs, AWS Developer Tools, & Amazon EC2 Systems Manager]","title":"Review assessment result"},{"location":"module2/#takeaway","text":"You have now deployed an AMI baking pipeline that uses AWS Systems Manager (SSM) to configure the base AMI according to your security requirements and assessed it for vulnerabilities. If you approved your AMI, navigate to the EC2 Console: Click Launch Instances Click on My AMIs Select the AMI created by the automation process and launch without a key pair.","title":"Takeaway"},{"location":"module3/","text":"Vulnerability Assessment and Patch Manager Setup In this section we are going to detect vulnerabilities on our live instances with Amazon Inspector . Due to the duration of a comprehensive vulnerability assessment and the limitation of time for the workshop we will test for Security Group vulnerabilities with the Amazon Inspector Network Reachability rules package. Additionally, we will show how to handle the execution of system patches utilizing approval workflows known as Patch Baselines. Setting up and Running Amazon Inspector Tip You can use the SSM run command to install the agent on your EC2 instances if they do not have the agent installed. Here is how you can do it. From the Management Console, go to the Amazon Inspector page. Click the Help Me Create an Assessment. Click Advanced Setup Define the assessment target Uncheck the All Instances checkbox, we will be creating an assessment based on tags. Tags are words or phrases that act as metadata for identifying and organizing your instances and other AWS resources. Every AWS tag consists of a key and value pair of your choice. Use Owner as the Key. Select your IAM user name as the Value. You can find this as one of the values assigned to your instances by looking through the tags associated with those instances. Using tags enables you to perform an assessment across different operating system types, specific applications and business units. Define an assessment template Select only the Network Reachability package. Select 15 minute duration. Set Assessment Schedule to 1 Days Click Next On the next screen hit Create You can now see your assessment template and configure it with an SNS topic for notifications and to trigger automated actions such as alerting and patching. Select your template and click Run Click on Findings in the Navigation Pane and filter on Medium. Select one of the Medium Severity findings. You can find details as seen below in terms of Network Reachability Patching your Windows and Linux instances with AWS SSM Patch Manager AWS Systems Manager Patch Manager automates the process of patching managed instances with both security related and other types of updates. You can use Patch Manager to apply patches for both operating systems and applications. (On Windows Server, application support is limited to updates for Microsoft applications.) You can patch fleets of EC2 instances or your on-premises servers and virtual machines (VMs) by operating system type. This includes supported versions of Windows Server, Ubuntu Server, Red Hat Enterprise Linux (RHEL), SUSE Linux Enterprise Server (SLES), CentOS, Amazon Linux, and Amazon Linux 2. You can scan instances to see only a report of missing patches, or you can scan and automatically install all missing patches. Patch Manager uses patch baselines, which include rules for auto-approving patches within days of their release, as well as a list of approved and rejected patches. You can install patches on a regular basis by scheduling patching to run as a Systems Manager maintenance window task. You can also install patches individually or to large groups of instances by using Amazon EC2 tags. (Tags are keys that help identify and sort your resources within your organization.) You can add tags to your patch baselines themselves when you create or update them. Creating EC2 instance Role for SSM and tagging under a Patch Group Create an IAM role for Systems Manager Before launching an Amazon EC2 instance, we recommend that your EC2 instances are associated with an instance profile with the AmazonEC2RoleforSSM AWS Managed Policy attached. Sign in to the IAM console and choose Roles in the navigation pane. Choose Create new role. In the role-creation workflow, choose AWS service > EC2 > EC2 to create a role for an EC2 instance. Choose the AmazonEC2RoleforSSM policy to attach it to the new role you are creating. You can leave the tags blank for this role. Give the role a meaningful name (I chose EC2SSM) and description, and choose Create role . Attach role to EC2 Instances Navigate the EC2 console and select one of your instances from Module 1. Select that instance and then click on the Actions drop down Select Instance Settings and then Attach/Replace IAM Role Select the IAM Role that you just created and hit Apply Add Tags The final step of configuring your EC2 instances is to add tags to the instances you just attached the EC2SSM role to. You will use these tags to configure Systems Manager later in this module. For this example I add a tag with a key of Patch Group and value of Windows Servers . I could have other groups of EC2 instances that I treat differently by having the same tag key but a different tag value. For example, I might have a collection of other servers with the Patch Group tag key with a value of IIS Servers. Configure AWS Systems Manager In this section, I show you how to use Systems Manager to apply operating system patches to your EC2 instances, and how to manage patch compliance. To start, I will provide some background information about Systems Manager. Then, I will cover how to: Create the Systems Manager IAM role so that Systems Manager is able to perform patch operations. Associate a Systems Manager patch baseline with your instance to define which patches Systems Manager should apply. Define a maintenance window to make sure Systems Manager patches your instance when you tell it to. Monitor patch compliance to verify the patch state of your instances. AWS Systems Manager is an AWS service that you can use to view and control your infrastructure on AWS. Systems Manager helps you maintain security and compliance by scanning your managed instances and reporting on (or taking corrective action on) any policy violations it detects. In this section, we use Systems Manager for two purposes: to run remote commands and apply operating system patches. There are two prerequisites to use Systems Manager to apply operating system patches. First, you must attach the IAM role you created in the previous section, EC2SSM, to your EC2 instance. Second, you must install the Systems Manager agent on your EC2 instance. The Systems Manager agent comes pre-installed on recent Linux and Windows AMIs published by AWS. To make sure your EC2 instance receives operating system patches from Systems Manager, you will use the default patch baseline provided and maintained by AWS, and you will define a maintenance window. For the maintenance window to be able to run any tasks, you also must create a new role for Systems Manager. Earlier we created the EC2SSM role with the AmazonEC2RoleforSSM policy, which allowed the Systems Manager agent on our instance to communicate with the Systems Manager service. Here we need a new role with the policy AmazonSSMMaintenanceWindowRole to make sure the Systems Manager service is able to execute commands on our instance. Create the Systems Manager IAM Role To create the new IAM role for Systems Manager, follow the same procedure as in the previous section, but in Step 3, choose the AmazonSSMMaintenanceWindowRole policy. Finish the wizard and give your new role a recognizable name. For example, I named my role MaintenanceWindowRole By default, only EC2 instances can assume this new role. You must update the trust policy to enable Systems Manager to assume this role. To update the trust policy associated with this new role: Navigate to the IAM console and choose Roles in the navigation pane. Choose MaintenanceWindowRole and choose the Trust relationships tab. Then choose Edit trust relationship . Update the policy document by copying the following policy and pasting it in the Policy Document box. As you can see, I have added the SSM service to the list of allowed Principals that can assume this role. Choose Update Trust Policy. { \"Version\" : \"2012-10-17\" , \"Statement\" :[ { \"Sid\" : \"\" , \"Effect\" : \"Allow\" , \"Principal\" : { \"Service\" :[ \"ec2.amazonaws.com\" , \"ssm.amazonaws.com\" ] } , \"Action\" : \"sts:AssumeRole\" } ] } Associate a Systems Manager patch baseline with your instance Next, you are going to associate a Systems Manager patch baseline with your EC2 instance. A patch baseline defines which patches Systems Manager should apply. You will use the default patch baseline that AWS manages and maintains. Before you can associate the patch baseline with your instance, you must determine if Systems Manager recognizes your EC2 instance. Navigate to the Systems Manager console, select Managed Instances under the Instances & Nodes dropdown. Your new EC2 instance should be available there Now that you have confirmed that Systems Manager can manage your EC2 instance, it is time to associate the AWS maintained patch baseline with your EC2 instance: Choose Patch Manager under Instances & Nodes in the sidebar of the AWS Systems Manager Console. Choose View predefined patch baselines as highlighted in the following screenshot. Select the AWS-DefaultPatchBasline and then choose Modify Patch Groups in the Actions drop-down. In the Patch group box, enter the same value you entered under the Patch Group tag of your EC2 instance. In this example, the value I enter is Windows Servers. Click the Add button next to the patch group and click Close . Define a Maintenance Window Now that you have successfully set up a role and have associated a patch baseline with your EC2 instance, you will define a maintenance window so that you can control when your EC2 instances should receive patches. By creating multiple maintenance windows and assigning them to different patch groups, you can make sure your EC2 instances do not all reboot at the same time. The Patch Group resource tag you defined earlier will determine to which patch group an instance belongs. Navigate to the Systems Manager console, in the sidebar under Actions & Change choose Maintenance Windows . Choose Create a Maintenance Window. Select the Cron schedule builder to define the schedule for the maintenance window. In the example in the following screenshot, the maintenance window will start every Saturday at 10:00 P.M. UTC. To specify when your maintenance window will end, specify the duration. In this example, the four-hour maintenance window will end on the following Sunday morning at 2:00 A.M. UTC. Lastly uncheck the Allow unregistered targets box. Info Systems manager completes all tasks that are in process, even if the maintenance window ends. In this example, we are choosing to prevent new tasks from starting within one hour of the end of my maintenance window because we estimated that patch operations might take longer than one hour to complete. Confirm the creation of the maintenance window by choosing Create maintenance button. You must register the EC2 instances to the maintenance window so that Systems Manager knows which EC2 instance it should patch. To do so, choose Register targets by selecting the option under Actions after you select your new maintenance window. You can register your targets by using the same Patch Group tag you used before to associate the EC2 instance with the AWS-provided patch baseline. Assign a task to the maintenance window that will install the operating system patches on your EC2 instance: Open Maintenance Windows in the Systems Manager console, select your previously created maintenance window and choose Register run command task from the Actions drop-down. For Maintenance window task details : Give the Maintenance Window an optional Name and Description For Comand document : Search for the AWS-RunPatchBaseline document from the list of available documents. For Targets : Select your previously created Window Target ID For Rate control : Specify your Concurrency and Error threshold Tip If you have a large number of EC2 instances and want to patch all EC2 instances within the defined time, make sure this number is not too low. For example, if you have 1,000 EC2 instances, a maintenance window of 4 hours, and 2 hours\u2019 time for patching, make this number at least 500. For IAM service role Choose the role you created previously (called MaintenanceWindowRole ). Leave Output options and SNS notifications unchecked For Parameters : For Operation , choose Install to make sure to install the patches. Leave the rest of the Parameters to default or no values Click Register Run command task Now, you must wait for the maintenance window to run at least once according to the schedule you defined earlier. Note that if you don\u2019t want to wait, you can adjust the schedule to run sooner by choosing Edit maintenance window on the Maintenance Windows page of Systems Manager. If your maintenance window has passed, you can check the status of any maintenance tasks Systems Manager has performed on the Maintenance Windows page of Systems Manager by selecting your maintenance window. Monitor Patch Compliance You also can see the overall patch compliance of all EC2 instances that are part of defined patch groups by choosing Compliance under the Instances & Nodes tab in the Systems Manager Console. You can filter by Patch Group to see how many EC2 instances within the selected patch group are up to date, how many EC2 instances are missing updates, and how many EC2 instances are in an error state. Attention If you check the Compliance tab in the Systems Manager console during this lab you may not see any results due to the Task in your Maintenance Window not running yet. AWS SSM Patch Manager Anatomy and Workflow Patch Anatomy The Patch Anatomy automation can be seen below: As we showed, with AWS Systems Manager you have the capability to, select the patches you want to deploy and control timing for patch roll-outs and instance reboots, define auto-approval rules for patches and have the ability to black-list or white-list specific patches in addition to scheduling the automatic roll out through maintenance windows. Patch Workflow We included a CloudFormation that will create the following Patch management Workflow Create necessary roles The roles to enable the EC2 instance communicate with SSM and SSM to communicate with the EC2 instance to be created. Create EC2 fleet with Patch Groups Create EC2 instances with the instance profile created above and attach the \u2018Patch Group\u2019 tag to the associated instances. Create patch baseline A patch baseline defines which patches are approved for installation on your instances. You can specify approved or rejected patches one by one. Auto-approval rules specify that certain types of updates (for example, critical updates) should be automatically approved. The rejected list overrides both the rules and the approve list. Create patch groups Patch groups can be defined by the type of operating system, compliance level and classification of the patch. Create a maintenance window This is the scheduler that maps through the list of registered targets and the corresponding tasks to be executed. The task registry has the document to be executed and the priority where multiple tasks are involved and attach the execution role created earlier. Deploy CloudFormation Click here if you're running this individually in your own AWS Account Launch the CloudFormation stack below to setup the SSM Patch Management Script: Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above (right click and open in a new tab). This will automatically take you to the console to run the template. Click Next on the Specify Template section. On the Specify Details step click Next . Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . Expected Outcome The instances which are scanned and ready to be patched using the Patch Manager will be visible under the EC2 \u2013 SSM \u2013 Managed Instances. The compliance report can be fetched with filter by tag values (\u2018Windows2012-PatchGroup\u2019 for Windows and \u2018Amz_Linux_Patch_Group\u2019 for Amazon Linux) or by instance id. The data will display the instances that are compliant and/or instances that need patching. This provides complete audit capability on your environment. Takeaway In this module, you have set everything up for patch management on your instance. Now you know how to patch your EC2 instance in a controlled manner and how to check if your EC2 instance is compliant with the patch baseline you have defined. Of course, I recommend that you apply these steps to all EC2 instances you manage.","title":"Module 3: Vulnerability Assessment"},{"location":"module3/#vulnerability-assessment-and-patch-manager-setup","text":"In this section we are going to detect vulnerabilities on our live instances with Amazon Inspector . Due to the duration of a comprehensive vulnerability assessment and the limitation of time for the workshop we will test for Security Group vulnerabilities with the Amazon Inspector Network Reachability rules package. Additionally, we will show how to handle the execution of system patches utilizing approval workflows known as Patch Baselines.","title":"Vulnerability Assessment and Patch Manager Setup"},{"location":"module3/#setting-up-and-running-amazon-inspector","text":"Tip You can use the SSM run command to install the agent on your EC2 instances if they do not have the agent installed. Here is how you can do it. From the Management Console, go to the Amazon Inspector page. Click the Help Me Create an Assessment. Click Advanced Setup Define the assessment target Uncheck the All Instances checkbox, we will be creating an assessment based on tags. Tags are words or phrases that act as metadata for identifying and organizing your instances and other AWS resources. Every AWS tag consists of a key and value pair of your choice. Use Owner as the Key. Select your IAM user name as the Value. You can find this as one of the values assigned to your instances by looking through the tags associated with those instances. Using tags enables you to perform an assessment across different operating system types, specific applications and business units. Define an assessment template Select only the Network Reachability package. Select 15 minute duration. Set Assessment Schedule to 1 Days Click Next On the next screen hit Create You can now see your assessment template and configure it with an SNS topic for notifications and to trigger automated actions such as alerting and patching. Select your template and click Run Click on Findings in the Navigation Pane and filter on Medium. Select one of the Medium Severity findings. You can find details as seen below in terms of Network Reachability","title":"Setting up and Running Amazon Inspector"},{"location":"module3/#patching-your-windows-and-linux-instances-with-aws-ssm-patch-manager","text":"AWS Systems Manager Patch Manager automates the process of patching managed instances with both security related and other types of updates. You can use Patch Manager to apply patches for both operating systems and applications. (On Windows Server, application support is limited to updates for Microsoft applications.) You can patch fleets of EC2 instances or your on-premises servers and virtual machines (VMs) by operating system type. This includes supported versions of Windows Server, Ubuntu Server, Red Hat Enterprise Linux (RHEL), SUSE Linux Enterprise Server (SLES), CentOS, Amazon Linux, and Amazon Linux 2. You can scan instances to see only a report of missing patches, or you can scan and automatically install all missing patches. Patch Manager uses patch baselines, which include rules for auto-approving patches within days of their release, as well as a list of approved and rejected patches. You can install patches on a regular basis by scheduling patching to run as a Systems Manager maintenance window task. You can also install patches individually or to large groups of instances by using Amazon EC2 tags. (Tags are keys that help identify and sort your resources within your organization.) You can add tags to your patch baselines themselves when you create or update them.","title":"Patching your Windows and Linux instances with AWS SSM Patch Manager"},{"location":"module3/#creating-ec2-instance-role-for-ssm-and-tagging-under-a-patch-group","text":"","title":"Creating EC2 instance Role for SSM and tagging under a Patch Group"},{"location":"module3/#create-an-iam-role-for-systems-manager","text":"Before launching an Amazon EC2 instance, we recommend that your EC2 instances are associated with an instance profile with the AmazonEC2RoleforSSM AWS Managed Policy attached. Sign in to the IAM console and choose Roles in the navigation pane. Choose Create new role. In the role-creation workflow, choose AWS service > EC2 > EC2 to create a role for an EC2 instance. Choose the AmazonEC2RoleforSSM policy to attach it to the new role you are creating. You can leave the tags blank for this role. Give the role a meaningful name (I chose EC2SSM) and description, and choose Create role .","title":"Create an IAM role for Systems Manager"},{"location":"module3/#attach-role-to-ec2-instances","text":"Navigate the EC2 console and select one of your instances from Module 1. Select that instance and then click on the Actions drop down Select Instance Settings and then Attach/Replace IAM Role Select the IAM Role that you just created and hit Apply","title":"Attach role to EC2 Instances"},{"location":"module3/#add-tags","text":"The final step of configuring your EC2 instances is to add tags to the instances you just attached the EC2SSM role to. You will use these tags to configure Systems Manager later in this module. For this example I add a tag with a key of Patch Group and value of Windows Servers . I could have other groups of EC2 instances that I treat differently by having the same tag key but a different tag value. For example, I might have a collection of other servers with the Patch Group tag key with a value of IIS Servers.","title":"Add Tags"},{"location":"module3/#configure-aws-systems-manager","text":"In this section, I show you how to use Systems Manager to apply operating system patches to your EC2 instances, and how to manage patch compliance. To start, I will provide some background information about Systems Manager. Then, I will cover how to: Create the Systems Manager IAM role so that Systems Manager is able to perform patch operations. Associate a Systems Manager patch baseline with your instance to define which patches Systems Manager should apply. Define a maintenance window to make sure Systems Manager patches your instance when you tell it to. Monitor patch compliance to verify the patch state of your instances. AWS Systems Manager is an AWS service that you can use to view and control your infrastructure on AWS. Systems Manager helps you maintain security and compliance by scanning your managed instances and reporting on (or taking corrective action on) any policy violations it detects. In this section, we use Systems Manager for two purposes: to run remote commands and apply operating system patches. There are two prerequisites to use Systems Manager to apply operating system patches. First, you must attach the IAM role you created in the previous section, EC2SSM, to your EC2 instance. Second, you must install the Systems Manager agent on your EC2 instance. The Systems Manager agent comes pre-installed on recent Linux and Windows AMIs published by AWS. To make sure your EC2 instance receives operating system patches from Systems Manager, you will use the default patch baseline provided and maintained by AWS, and you will define a maintenance window. For the maintenance window to be able to run any tasks, you also must create a new role for Systems Manager. Earlier we created the EC2SSM role with the AmazonEC2RoleforSSM policy, which allowed the Systems Manager agent on our instance to communicate with the Systems Manager service. Here we need a new role with the policy AmazonSSMMaintenanceWindowRole to make sure the Systems Manager service is able to execute commands on our instance.","title":"Configure AWS Systems Manager"},{"location":"module3/#create-the-systems-manager-iam-role","text":"To create the new IAM role for Systems Manager, follow the same procedure as in the previous section, but in Step 3, choose the AmazonSSMMaintenanceWindowRole policy. Finish the wizard and give your new role a recognizable name. For example, I named my role MaintenanceWindowRole By default, only EC2 instances can assume this new role. You must update the trust policy to enable Systems Manager to assume this role. To update the trust policy associated with this new role: Navigate to the IAM console and choose Roles in the navigation pane. Choose MaintenanceWindowRole and choose the Trust relationships tab. Then choose Edit trust relationship . Update the policy document by copying the following policy and pasting it in the Policy Document box. As you can see, I have added the SSM service to the list of allowed Principals that can assume this role. Choose Update Trust Policy. { \"Version\" : \"2012-10-17\" , \"Statement\" :[ { \"Sid\" : \"\" , \"Effect\" : \"Allow\" , \"Principal\" : { \"Service\" :[ \"ec2.amazonaws.com\" , \"ssm.amazonaws.com\" ] } , \"Action\" : \"sts:AssumeRole\" } ] }","title":"Create the Systems Manager IAM Role"},{"location":"module3/#associate-a-systems-manager-patch-baseline-with-your-instance","text":"Next, you are going to associate a Systems Manager patch baseline with your EC2 instance. A patch baseline defines which patches Systems Manager should apply. You will use the default patch baseline that AWS manages and maintains. Before you can associate the patch baseline with your instance, you must determine if Systems Manager recognizes your EC2 instance. Navigate to the Systems Manager console, select Managed Instances under the Instances & Nodes dropdown. Your new EC2 instance should be available there Now that you have confirmed that Systems Manager can manage your EC2 instance, it is time to associate the AWS maintained patch baseline with your EC2 instance: Choose Patch Manager under Instances & Nodes in the sidebar of the AWS Systems Manager Console. Choose View predefined patch baselines as highlighted in the following screenshot. Select the AWS-DefaultPatchBasline and then choose Modify Patch Groups in the Actions drop-down. In the Patch group box, enter the same value you entered under the Patch Group tag of your EC2 instance. In this example, the value I enter is Windows Servers. Click the Add button next to the patch group and click Close .","title":"Associate a Systems Manager patch baseline with your instance"},{"location":"module3/#define-a-maintenance-window","text":"Now that you have successfully set up a role and have associated a patch baseline with your EC2 instance, you will define a maintenance window so that you can control when your EC2 instances should receive patches. By creating multiple maintenance windows and assigning them to different patch groups, you can make sure your EC2 instances do not all reboot at the same time. The Patch Group resource tag you defined earlier will determine to which patch group an instance belongs. Navigate to the Systems Manager console, in the sidebar under Actions & Change choose Maintenance Windows . Choose Create a Maintenance Window. Select the Cron schedule builder to define the schedule for the maintenance window. In the example in the following screenshot, the maintenance window will start every Saturday at 10:00 P.M. UTC. To specify when your maintenance window will end, specify the duration. In this example, the four-hour maintenance window will end on the following Sunday morning at 2:00 A.M. UTC. Lastly uncheck the Allow unregistered targets box. Info Systems manager completes all tasks that are in process, even if the maintenance window ends. In this example, we are choosing to prevent new tasks from starting within one hour of the end of my maintenance window because we estimated that patch operations might take longer than one hour to complete. Confirm the creation of the maintenance window by choosing Create maintenance button. You must register the EC2 instances to the maintenance window so that Systems Manager knows which EC2 instance it should patch. To do so, choose Register targets by selecting the option under Actions after you select your new maintenance window. You can register your targets by using the same Patch Group tag you used before to associate the EC2 instance with the AWS-provided patch baseline. Assign a task to the maintenance window that will install the operating system patches on your EC2 instance: Open Maintenance Windows in the Systems Manager console, select your previously created maintenance window and choose Register run command task from the Actions drop-down. For Maintenance window task details : Give the Maintenance Window an optional Name and Description For Comand document : Search for the AWS-RunPatchBaseline document from the list of available documents. For Targets : Select your previously created Window Target ID For Rate control : Specify your Concurrency and Error threshold Tip If you have a large number of EC2 instances and want to patch all EC2 instances within the defined time, make sure this number is not too low. For example, if you have 1,000 EC2 instances, a maintenance window of 4 hours, and 2 hours\u2019 time for patching, make this number at least 500. For IAM service role Choose the role you created previously (called MaintenanceWindowRole ). Leave Output options and SNS notifications unchecked For Parameters : For Operation , choose Install to make sure to install the patches. Leave the rest of the Parameters to default or no values Click Register Run command task Now, you must wait for the maintenance window to run at least once according to the schedule you defined earlier. Note that if you don\u2019t want to wait, you can adjust the schedule to run sooner by choosing Edit maintenance window on the Maintenance Windows page of Systems Manager. If your maintenance window has passed, you can check the status of any maintenance tasks Systems Manager has performed on the Maintenance Windows page of Systems Manager by selecting your maintenance window.","title":"Define a Maintenance Window"},{"location":"module3/#monitor-patch-compliance","text":"You also can see the overall patch compliance of all EC2 instances that are part of defined patch groups by choosing Compliance under the Instances & Nodes tab in the Systems Manager Console. You can filter by Patch Group to see how many EC2 instances within the selected patch group are up to date, how many EC2 instances are missing updates, and how many EC2 instances are in an error state. Attention If you check the Compliance tab in the Systems Manager console during this lab you may not see any results due to the Task in your Maintenance Window not running yet.","title":"Monitor Patch Compliance"},{"location":"module3/#aws-ssm-patch-manager-anatomy-and-workflow","text":"","title":"AWS SSM Patch Manager Anatomy and Workflow"},{"location":"module3/#patch-anatomy","text":"The Patch Anatomy automation can be seen below: As we showed, with AWS Systems Manager you have the capability to, select the patches you want to deploy and control timing for patch roll-outs and instance reboots, define auto-approval rules for patches and have the ability to black-list or white-list specific patches in addition to scheduling the automatic roll out through maintenance windows.","title":"Patch Anatomy"},{"location":"module3/#patch-workflow","text":"We included a CloudFormation that will create the following Patch management Workflow Create necessary roles The roles to enable the EC2 instance communicate with SSM and SSM to communicate with the EC2 instance to be created. Create EC2 fleet with Patch Groups Create EC2 instances with the instance profile created above and attach the \u2018Patch Group\u2019 tag to the associated instances. Create patch baseline A patch baseline defines which patches are approved for installation on your instances. You can specify approved or rejected patches one by one. Auto-approval rules specify that certain types of updates (for example, critical updates) should be automatically approved. The rejected list overrides both the rules and the approve list. Create patch groups Patch groups can be defined by the type of operating system, compliance level and classification of the patch. Create a maintenance window This is the scheduler that maps through the list of registered targets and the corresponding tasks to be executed. The task registry has the document to be executed and the priority where multiple tasks are involved and attach the execution role created earlier.","title":"Patch Workflow"},{"location":"module3/#deploy-cloudformation","text":"Click here if you're running this individually in your own AWS Account Launch the CloudFormation stack below to setup the SSM Patch Management Script: Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above (right click and open in a new tab). This will automatically take you to the console to run the template. Click Next on the Specify Template section. On the Specify Details step click Next . Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . Expected Outcome The instances which are scanned and ready to be patched using the Patch Manager will be visible under the EC2 \u2013 SSM \u2013 Managed Instances. The compliance report can be fetched with filter by tag values (\u2018Windows2012-PatchGroup\u2019 for Windows and \u2018Amz_Linux_Patch_Group\u2019 for Amazon Linux) or by instance id. The data will display the instances that are compliant and/or instances that need patching. This provides complete audit capability on your environment.","title":"Deploy CloudFormation"},{"location":"module3/#takeaway","text":"In this module, you have set everything up for patch management on your instance. Now you know how to patch your EC2 instance in a controlled manner and how to check if your EC2 instance is compliant with the patch baseline you have defined. Of course, I recommend that you apply these steps to all EC2 instances you manage.","title":"Takeaway"},{"location":"module3/indexv0/","text":"Vulnerability Assessment and Patch Manager Setup In this section we are going to detect vulnerabilities on our live instances with Amazon Inspector . Due to the duration of a comprehensive vulnerability assessment and the limitation of time for the workshop we will test for Security Group vulnerabilities with the Amazon Inspector Network Reachability rules package. Additionally, we will show how to handle the execution of system patches utilizing approval workflows known as Patch Baselines. Setting up and Running Amazon Inspector Tip You can use the SSM run command to install the agent on your EC2 instances if they do not have the agent installed. Here is how you can do it. From the Management Console, go to the Amazon Inspector page. Click the Help Me Create an Assessment. Click Advanced Setup Define the assessment target Uncheck the All Instances checkbox, we will be creating an assessment based on tags. Tags are words or phrases that act as metadata for identifying and organizing your instances and other AWS resources. Every AWS tag consists of a key and value pair of your choice. Use Owner as the Key. Select your IAM user name as the Value. You can find this as one of the values assigned to your instances by looking through the tags associated with those instances. Using tags enables you to perform an assessment across different operating system types, specific applications and business units. Define an assessment template Select only the Network Reachability package. Select 15 minute duration. Set Assessment Schedule to 1 Days Click Next On the next screen hit Create You can now see your assessment template and configure it with an SNS topic for notifications and to trigger automated actions such as alerting and patching. Select your template and click Run Click on Findings in the Navigation Pane and filter on Medium. Select one of the Medium Severity findings. You can find details as seen below in terms of Network Reachability Patching your Windows and Linux instances with AWS SSM Patch Manager AWS Systems Manager Patch Manager automates the process of patching managed instances with both security related and other types of updates. You can use Patch Manager to apply patches for both operating systems and applications. (On Windows Server, application support is limited to updates for Microsoft applications.) You can patch fleets of EC2 instances or your on-premises servers and virtual machines (VMs) by operating system type. This includes supported versions of Windows Server, Ubuntu Server, Red Hat Enterprise Linux (RHEL), SUSE Linux Enterprise Server (SLES), CentOS, Amazon Linux, and Amazon Linux 2. You can scan instances to see only a report of missing patches, or you can scan and automatically install all missing patches. Patch Manager uses patch baselines, which include rules for auto-approving patches within days of their release, as well as a list of approved and rejected patches. You can install patches on a regular basis by scheduling patching to run as a Systems Manager maintenance window task. You can also install patches individually or to large groups of instances by using Amazon EC2 tags. (Tags are keys that help identify and sort your resources within your organization.) You can add tags to your patch baselines themselves when you create or update them. Creating EC2 instance Role for SSM and tagging under a Patch Group Create an IAM role for Systems Manager Before launching an Amazon EC2 instance, we recommend that your EC2 instances are associated with an instance profile with the AmazonEC2RoleforSSM AWS Managed Policy attached. Sign in to the IAM console and choose Roles in the navigation pane. Choose Create new role. In the role-creation workflow, choose AWS service > EC2 > EC2 to create a role for an EC2 instance. Choose the AmazonEC2RoleforSSM policy to attach it to the new role you are creating. You can leave the tags blank for this role. Give the role a meaningful name (I chose EC2SSM) and description, and choose Create role . Attach role to EC2 Instances Navigate the EC2 console and select one of your instances from Module 1. Select that instance and then click on the Actions drop down Select Instance Settings and then Attach/Replace IAM Role Select the IAM Role that you just created and hit Apply Add Tags The final step of configuring your EC2 instances is to add tags to the instances you just attached the EC2SSM role to. You will use these tags to configure Systems Manager later in this module. For this example I add a tag with a key of Patch Group and value of Windows Servers . I could have other groups of EC2 instances that I treat differently by having the same tag key but a different tag value. For example, I might have a collection of other servers with the Patch Group tag key with a value of IIS Servers. Configure AWS Systems Manager In this section, I show you how to use Systems Manager to apply operating system patches to your EC2 instances, and how to manage patch compliance. To start, I will provide some background information about Systems Manager. Then, I will cover how to: Create the Systems Manager IAM role so that Systems Manager is able to perform patch operations. Associate a Systems Manager patch baseline with your instance to define which patches Systems Manager should apply. Define a maintenance window to make sure Systems Manager patches your instance when you tell it to. Monitor patch compliance to verify the patch state of your instances. AWS Systems Manager is an AWS service that you can use to view and control your infrastructure on AWS. Systems Manager helps you maintain security and compliance by scanning your managed instances and reporting on (or taking corrective action on) any policy violations it detects. In this section, we use Systems Manager for two purposes: to run remote commands and apply operating system patches. There are two prerequisites to use Systems Manager to apply operating system patches. First, you must attach the IAM role you created in the previous section, EC2SSM, to your EC2 instance. Second, you must install the Systems Manager agent on your EC2 instance. The Systems Manager agent comes pre-installed on recent Linux and Windows AMIs published by AWS. To make sure your EC2 instance receives operating system patches from Systems Manager, you will use the default patch baseline provided and maintained by AWS, and you will define a maintenance window. For the maintenance window to be able to run any tasks, you also must create a new role for Systems Manager. Earlier we created the EC2SSM role with the AmazonEC2RoleforSSM policy, which allowed the Systems Manager agent on our instance to communicate with the Systems Manager service. Here we need a new role with the policy AmazonSSMMaintenanceWindowRole to make sure the Systems Manager service is able to execute commands on our instance. Create the Systems Manager IAM Role To create the new IAM role for Systems Manager, follow the same procedure as in the previous section, but in Step 3, choose the AmazonSSMMaintenanceWindowRole policy. Finish the wizard and give your new role a recognizable name. For example, I named my role MaintenanceWindowRole By default, only EC2 instances can assume this new role. You must update the trust policy to enable Systems Manager to assume this role. To update the trust policy associated with this new role: Navigate to the IAM console and choose Roles in the navigation pane. Choose MaintenanceWindowRole and choose the Trust relationships tab. Then choose Edit trust relationship . Update the policy document by copying the following policy and pasting it in the Policy Document box. As you can see, I have added the SSM service to the list of allowed Principals that can assume this role. Choose Update Trust Policy. { \"Version\" : \"2012-10-17\" , \"Statement\" :[ { \"Sid\" : \"\" , \"Effect\" : \"Allow\" , \"Principal\" : { \"Service\" :[ \"ec2.amazonaws.com\" , \"ssm.amazonaws.com\" ] } , \"Action\" : \"sts:AssumeRole\" } ] } Associate a Systems Manager patch baseline with your instance Next, you are going to associate a Systems Manager patch baseline with your EC2 instance. A patch baseline defines which patches Systems Manager should apply. You will use the default patch baseline that AWS manages and maintains. Before you can associate the patch baseline with your instance, you must determine if Systems Manager recognizes your EC2 instance. Navigate to the Systems Manager console, select Managed Instances under the Instances & Nodes dropdown. Your new EC2 instance should be available there Now that you have confirmed that Systems Manager can manage your EC2 instance, it is time to associate the AWS maintained patch baseline with your EC2 instance: Choose Patch Manager under Instances & Nodes in the sidebar of the AWS Systems Manager Console. Choose View predefined patch baselines as highlighted in the following screenshot. Select the AWS-DefaultPatchBasline and then choose Modify Patch Groups in the Actions drop-down. In the Patch group box, enter the same value you entered under the Patch Group tag of your EC2 instance. In this example, the value I enter is Windows Servers. Click the Add button next to the patch group and click Close . Define a Maintenance Window Now that you have successfully set up a role and have associated a patch baseline with your EC2 instance, you will define a maintenance window so that you can control when your EC2 instances should receive patches. By creating multiple maintenance windows and assigning them to different patch groups, you can make sure your EC2 instances do not all reboot at the same time. The Patch Group resource tag you defined earlier will determine to which patch group an instance belongs. Navigate to the Systems Manager console, in the sidebar under Actions & Change choose Maintenance Windows . Choose Create a Maintenance Window. Select the Cron schedule builder to define the schedule for the maintenance window. In the example in the following screenshot, the maintenance window will start every Saturday at 10:00 P.M. UTC. To specify when your maintenance window will end, specify the duration. In this example, the four-hour maintenance window will end on the following Sunday morning at 2:00 A.M. UTC. Lastly uncheck the Allow unregistered targets box. Info Systems manager completes all tasks that are in process, even if the maintenance window ends. In this example, we are choosing to prevent new tasks from starting within one hour of the end of my maintenance window because we estimated that patch operations might take longer than one hour to complete. Confirm the creation of the maintenance window by choosing Create maintenance button. You must register the EC2 instances to the maintenance window so that Systems Manager knows which EC2 instance it should patch. To do so, choose Register targets by selecting the option under Actions after you select your new maintenance window. You can register your targets by using the same Patch Group tag you used before to associate the EC2 instance with the AWS-provided patch baseline. Assign a task to the maintenance window that will install the operating system patches on your EC2 instance: Open Maintenance Windows in the Systems Manager console, select your previously created maintenance window and choose Register run command task from the Actions drop-down. For Maintenance window task details : Give the Maintenance Window an optional Name and Description For Comand document : Search for the AWS-RunPatchBaseline document from the list of available documents. For Targets : Select your previously created Window Target ID For Rate control : Specify your Concurrency and Error threshold Tip If you have a large number of EC2 instances and want to patch all EC2 instances within the defined time, make sure this number is not too low. For example, if you have 1,000 EC2 instances, a maintenance window of 4 hours, and 2 hours\u2019 time for patching, make this number at least 500. For IAM service role Choose the role you created previously (called MaintenanceWindowRole ). Leave Output options and SNS notifications unchecked For Parameters : For Operation , choose Install to make sure to install the patches. Leave the rest of the Parameters to default or no values Click Register Run command task Now, you must wait for the maintenance window to run at least once according to the schedule you defined earlier. Note that if you don\u2019t want to wait, you can adjust the schedule to run sooner by choosing Edit maintenance window on the Maintenance Windows page of Systems Manager. If your maintenance window has passed, you can check the status of any maintenance tasks Systems Manager has performed on the Maintenance Windows page of Systems Manager by selecting your maintenance window. Monitor Patch Compliance You also can see the overall patch compliance of all EC2 instances that are part of defined patch groups by choosing Compliance under the Instances & Nodes tab in the Systems Manager Console. You can filter by Patch Group to see how many EC2 instances within the selected patch group are up to date, how many EC2 instances are missing updates, and how many EC2 instances are in an error state. Attention If you check the Compliance tab in the Systems Manager console during this lab you may not see any results due to the Task in your Maintenance Window not running yet. Automation - Patching your Windows and Linux instances with AWS SSM Patch manager AWS SSM Patch Manager enables automation of the process of patching managed instances. Instances can be scanned to see a report of missing patches, or automatically install all missing patches. Patch Manager uses patch baselines that include rules for auto-approving patches within days of their release, as well as a list of approved and rejected patches. Patches can be installed on a regular basis by scheduling patching to run as a Systems Manager Maintenance Window task. Patches can be at any scale from individual instances to large groups of instances by using Amazon EC2 tags. To use Patch Manager, the following tasks must be completed. Verify that the default patch baselines meet your needs, or create patch baselines that define a standard set of patches for your instances. Organize instances into patch groups by using Amazon EC2 tags. Schedule patching by using a Maintenance Window that defines which instances to patch and when to patch them. Monitor patching to verify compliance and investigate failures. Patch Anatomy The Patch Anatomy automation can be seen below: Select the patches you want to deploy and control timing for patch roll-outs and instance reboots. Define auto-approval rules for patches and have the ability to black-list or white-list specific patches. Schedule the automatic roll out through maintenance windows Patch Workflow We will deploy a CloudFormation that will create the following Patch management Workflow Create necessary roles The roles to enable the EC2 instance communicate with SSM and SSM to communicate with the EC2 instance to be created. Create EC2 fleet with Patch Groups Create EC2 instances with the instance profile created above and attach the \u2018Patch Group\u2019 tag to the associated instances. Create patch baseline A patch baseline defines which patches are approved for installation on your instances. You can specify approved or rejected patches one by one. Auto-approval rules specify that certain types of updates (for example, critical updates) should be automatically approved. The rejected list overrides both the rules and the approve list. Create patch groups Patch groups can be defined by the type of operating system, compliance level and classification of the patch. Create a maintenance window This is the scheduler that maps through the list of registered targets and the corresponding tasks to be executed. The task registry has the document to be executed and the priority where multiple tasks are involved and attach the execution role created earlier. Deploy CloudFormation Click here if you're running this individually in your own AWS Account Launch the CloudFormation stack below to setup the SSM Patch Management Script: Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above (right click and open in a new tab). This will automatically take you to the console to run the template. Click Next on the Specify Template section. On the Specify Details step click Next . Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . Expected Outcome The instances which are scanned and ready to be patched using the Patch Manager will be visible under the EC2 \u2013 SSM \u2013 Managed Instances. The compliance report can be fetched with filter by tag values (\u2018Windows2012-PatchGroup\u2019 for Windows and \u2018Amz_Linux_Patch_Group\u2019 for Amazon Linux) or by instance id. The data will display the instances that are compliant and/or instances that need patching. This provides complete audit capability on your environment. Takeaway In this module, you have set everything up for patch management on your instance. Now you know how to patch your EC2 instance in a controlled manner and how to check if your EC2 instance is compliant with the patch baseline you have defined. Of course, I recommend that you apply these steps to all EC2 instances you manage.","title":"Indexv0"},{"location":"module3/indexv0/#vulnerability-assessment-and-patch-manager-setup","text":"In this section we are going to detect vulnerabilities on our live instances with Amazon Inspector . Due to the duration of a comprehensive vulnerability assessment and the limitation of time for the workshop we will test for Security Group vulnerabilities with the Amazon Inspector Network Reachability rules package. Additionally, we will show how to handle the execution of system patches utilizing approval workflows known as Patch Baselines.","title":"Vulnerability Assessment and Patch Manager Setup"},{"location":"module3/indexv0/#setting-up-and-running-amazon-inspector","text":"Tip You can use the SSM run command to install the agent on your EC2 instances if they do not have the agent installed. Here is how you can do it. From the Management Console, go to the Amazon Inspector page. Click the Help Me Create an Assessment. Click Advanced Setup Define the assessment target Uncheck the All Instances checkbox, we will be creating an assessment based on tags. Tags are words or phrases that act as metadata for identifying and organizing your instances and other AWS resources. Every AWS tag consists of a key and value pair of your choice. Use Owner as the Key. Select your IAM user name as the Value. You can find this as one of the values assigned to your instances by looking through the tags associated with those instances. Using tags enables you to perform an assessment across different operating system types, specific applications and business units. Define an assessment template Select only the Network Reachability package. Select 15 minute duration. Set Assessment Schedule to 1 Days Click Next On the next screen hit Create You can now see your assessment template and configure it with an SNS topic for notifications and to trigger automated actions such as alerting and patching. Select your template and click Run Click on Findings in the Navigation Pane and filter on Medium. Select one of the Medium Severity findings. You can find details as seen below in terms of Network Reachability","title":"Setting up and Running Amazon Inspector"},{"location":"module3/indexv0/#patching-your-windows-and-linux-instances-with-aws-ssm-patch-manager","text":"AWS Systems Manager Patch Manager automates the process of patching managed instances with both security related and other types of updates. You can use Patch Manager to apply patches for both operating systems and applications. (On Windows Server, application support is limited to updates for Microsoft applications.) You can patch fleets of EC2 instances or your on-premises servers and virtual machines (VMs) by operating system type. This includes supported versions of Windows Server, Ubuntu Server, Red Hat Enterprise Linux (RHEL), SUSE Linux Enterprise Server (SLES), CentOS, Amazon Linux, and Amazon Linux 2. You can scan instances to see only a report of missing patches, or you can scan and automatically install all missing patches. Patch Manager uses patch baselines, which include rules for auto-approving patches within days of their release, as well as a list of approved and rejected patches. You can install patches on a regular basis by scheduling patching to run as a Systems Manager maintenance window task. You can also install patches individually or to large groups of instances by using Amazon EC2 tags. (Tags are keys that help identify and sort your resources within your organization.) You can add tags to your patch baselines themselves when you create or update them.","title":"Patching your Windows and Linux instances with AWS SSM Patch Manager"},{"location":"module3/indexv0/#creating-ec2-instance-role-for-ssm-and-tagging-under-a-patch-group","text":"","title":"Creating EC2 instance Role for SSM and tagging under a Patch Group"},{"location":"module3/indexv0/#create-an-iam-role-for-systems-manager","text":"Before launching an Amazon EC2 instance, we recommend that your EC2 instances are associated with an instance profile with the AmazonEC2RoleforSSM AWS Managed Policy attached. Sign in to the IAM console and choose Roles in the navigation pane. Choose Create new role. In the role-creation workflow, choose AWS service > EC2 > EC2 to create a role for an EC2 instance. Choose the AmazonEC2RoleforSSM policy to attach it to the new role you are creating. You can leave the tags blank for this role. Give the role a meaningful name (I chose EC2SSM) and description, and choose Create role .","title":"Create an IAM role for Systems Manager"},{"location":"module3/indexv0/#attach-role-to-ec2-instances","text":"Navigate the EC2 console and select one of your instances from Module 1. Select that instance and then click on the Actions drop down Select Instance Settings and then Attach/Replace IAM Role Select the IAM Role that you just created and hit Apply","title":"Attach role to EC2 Instances"},{"location":"module3/indexv0/#add-tags","text":"The final step of configuring your EC2 instances is to add tags to the instances you just attached the EC2SSM role to. You will use these tags to configure Systems Manager later in this module. For this example I add a tag with a key of Patch Group and value of Windows Servers . I could have other groups of EC2 instances that I treat differently by having the same tag key but a different tag value. For example, I might have a collection of other servers with the Patch Group tag key with a value of IIS Servers.","title":"Add Tags"},{"location":"module3/indexv0/#configure-aws-systems-manager","text":"In this section, I show you how to use Systems Manager to apply operating system patches to your EC2 instances, and how to manage patch compliance. To start, I will provide some background information about Systems Manager. Then, I will cover how to: Create the Systems Manager IAM role so that Systems Manager is able to perform patch operations. Associate a Systems Manager patch baseline with your instance to define which patches Systems Manager should apply. Define a maintenance window to make sure Systems Manager patches your instance when you tell it to. Monitor patch compliance to verify the patch state of your instances. AWS Systems Manager is an AWS service that you can use to view and control your infrastructure on AWS. Systems Manager helps you maintain security and compliance by scanning your managed instances and reporting on (or taking corrective action on) any policy violations it detects. In this section, we use Systems Manager for two purposes: to run remote commands and apply operating system patches. There are two prerequisites to use Systems Manager to apply operating system patches. First, you must attach the IAM role you created in the previous section, EC2SSM, to your EC2 instance. Second, you must install the Systems Manager agent on your EC2 instance. The Systems Manager agent comes pre-installed on recent Linux and Windows AMIs published by AWS. To make sure your EC2 instance receives operating system patches from Systems Manager, you will use the default patch baseline provided and maintained by AWS, and you will define a maintenance window. For the maintenance window to be able to run any tasks, you also must create a new role for Systems Manager. Earlier we created the EC2SSM role with the AmazonEC2RoleforSSM policy, which allowed the Systems Manager agent on our instance to communicate with the Systems Manager service. Here we need a new role with the policy AmazonSSMMaintenanceWindowRole to make sure the Systems Manager service is able to execute commands on our instance.","title":"Configure AWS Systems Manager"},{"location":"module3/indexv0/#create-the-systems-manager-iam-role","text":"To create the new IAM role for Systems Manager, follow the same procedure as in the previous section, but in Step 3, choose the AmazonSSMMaintenanceWindowRole policy. Finish the wizard and give your new role a recognizable name. For example, I named my role MaintenanceWindowRole By default, only EC2 instances can assume this new role. You must update the trust policy to enable Systems Manager to assume this role. To update the trust policy associated with this new role: Navigate to the IAM console and choose Roles in the navigation pane. Choose MaintenanceWindowRole and choose the Trust relationships tab. Then choose Edit trust relationship . Update the policy document by copying the following policy and pasting it in the Policy Document box. As you can see, I have added the SSM service to the list of allowed Principals that can assume this role. Choose Update Trust Policy. { \"Version\" : \"2012-10-17\" , \"Statement\" :[ { \"Sid\" : \"\" , \"Effect\" : \"Allow\" , \"Principal\" : { \"Service\" :[ \"ec2.amazonaws.com\" , \"ssm.amazonaws.com\" ] } , \"Action\" : \"sts:AssumeRole\" } ] }","title":"Create the Systems Manager IAM Role"},{"location":"module3/indexv0/#associate-a-systems-manager-patch-baseline-with-your-instance","text":"Next, you are going to associate a Systems Manager patch baseline with your EC2 instance. A patch baseline defines which patches Systems Manager should apply. You will use the default patch baseline that AWS manages and maintains. Before you can associate the patch baseline with your instance, you must determine if Systems Manager recognizes your EC2 instance. Navigate to the Systems Manager console, select Managed Instances under the Instances & Nodes dropdown. Your new EC2 instance should be available there Now that you have confirmed that Systems Manager can manage your EC2 instance, it is time to associate the AWS maintained patch baseline with your EC2 instance: Choose Patch Manager under Instances & Nodes in the sidebar of the AWS Systems Manager Console. Choose View predefined patch baselines as highlighted in the following screenshot. Select the AWS-DefaultPatchBasline and then choose Modify Patch Groups in the Actions drop-down. In the Patch group box, enter the same value you entered under the Patch Group tag of your EC2 instance. In this example, the value I enter is Windows Servers. Click the Add button next to the patch group and click Close .","title":"Associate a Systems Manager patch baseline with your instance"},{"location":"module3/indexv0/#define-a-maintenance-window","text":"Now that you have successfully set up a role and have associated a patch baseline with your EC2 instance, you will define a maintenance window so that you can control when your EC2 instances should receive patches. By creating multiple maintenance windows and assigning them to different patch groups, you can make sure your EC2 instances do not all reboot at the same time. The Patch Group resource tag you defined earlier will determine to which patch group an instance belongs. Navigate to the Systems Manager console, in the sidebar under Actions & Change choose Maintenance Windows . Choose Create a Maintenance Window. Select the Cron schedule builder to define the schedule for the maintenance window. In the example in the following screenshot, the maintenance window will start every Saturday at 10:00 P.M. UTC. To specify when your maintenance window will end, specify the duration. In this example, the four-hour maintenance window will end on the following Sunday morning at 2:00 A.M. UTC. Lastly uncheck the Allow unregistered targets box. Info Systems manager completes all tasks that are in process, even if the maintenance window ends. In this example, we are choosing to prevent new tasks from starting within one hour of the end of my maintenance window because we estimated that patch operations might take longer than one hour to complete. Confirm the creation of the maintenance window by choosing Create maintenance button. You must register the EC2 instances to the maintenance window so that Systems Manager knows which EC2 instance it should patch. To do so, choose Register targets by selecting the option under Actions after you select your new maintenance window. You can register your targets by using the same Patch Group tag you used before to associate the EC2 instance with the AWS-provided patch baseline. Assign a task to the maintenance window that will install the operating system patches on your EC2 instance: Open Maintenance Windows in the Systems Manager console, select your previously created maintenance window and choose Register run command task from the Actions drop-down. For Maintenance window task details : Give the Maintenance Window an optional Name and Description For Comand document : Search for the AWS-RunPatchBaseline document from the list of available documents. For Targets : Select your previously created Window Target ID For Rate control : Specify your Concurrency and Error threshold Tip If you have a large number of EC2 instances and want to patch all EC2 instances within the defined time, make sure this number is not too low. For example, if you have 1,000 EC2 instances, a maintenance window of 4 hours, and 2 hours\u2019 time for patching, make this number at least 500. For IAM service role Choose the role you created previously (called MaintenanceWindowRole ). Leave Output options and SNS notifications unchecked For Parameters : For Operation , choose Install to make sure to install the patches. Leave the rest of the Parameters to default or no values Click Register Run command task Now, you must wait for the maintenance window to run at least once according to the schedule you defined earlier. Note that if you don\u2019t want to wait, you can adjust the schedule to run sooner by choosing Edit maintenance window on the Maintenance Windows page of Systems Manager. If your maintenance window has passed, you can check the status of any maintenance tasks Systems Manager has performed on the Maintenance Windows page of Systems Manager by selecting your maintenance window.","title":"Define a Maintenance Window"},{"location":"module3/indexv0/#monitor-patch-compliance","text":"You also can see the overall patch compliance of all EC2 instances that are part of defined patch groups by choosing Compliance under the Instances & Nodes tab in the Systems Manager Console. You can filter by Patch Group to see how many EC2 instances within the selected patch group are up to date, how many EC2 instances are missing updates, and how many EC2 instances are in an error state. Attention If you check the Compliance tab in the Systems Manager console during this lab you may not see any results due to the Task in your Maintenance Window not running yet.","title":"Monitor Patch Compliance"},{"location":"module3/indexv0/#automation-patching-your-windows-and-linux-instances-with-aws-ssm-patch-manager","text":"AWS SSM Patch Manager enables automation of the process of patching managed instances. Instances can be scanned to see a report of missing patches, or automatically install all missing patches. Patch Manager uses patch baselines that include rules for auto-approving patches within days of their release, as well as a list of approved and rejected patches. Patches can be installed on a regular basis by scheduling patching to run as a Systems Manager Maintenance Window task. Patches can be at any scale from individual instances to large groups of instances by using Amazon EC2 tags. To use Patch Manager, the following tasks must be completed. Verify that the default patch baselines meet your needs, or create patch baselines that define a standard set of patches for your instances. Organize instances into patch groups by using Amazon EC2 tags. Schedule patching by using a Maintenance Window that defines which instances to patch and when to patch them. Monitor patching to verify compliance and investigate failures.","title":"Automation - Patching your Windows and Linux instances with AWS SSM Patch manager"},{"location":"module3/indexv0/#patch-anatomy","text":"The Patch Anatomy automation can be seen below: Select the patches you want to deploy and control timing for patch roll-outs and instance reboots. Define auto-approval rules for patches and have the ability to black-list or white-list specific patches. Schedule the automatic roll out through maintenance windows","title":"Patch Anatomy"},{"location":"module3/indexv0/#patch-workflow","text":"We will deploy a CloudFormation that will create the following Patch management Workflow Create necessary roles The roles to enable the EC2 instance communicate with SSM and SSM to communicate with the EC2 instance to be created. Create EC2 fleet with Patch Groups Create EC2 instances with the instance profile created above and attach the \u2018Patch Group\u2019 tag to the associated instances. Create patch baseline A patch baseline defines which patches are approved for installation on your instances. You can specify approved or rejected patches one by one. Auto-approval rules specify that certain types of updates (for example, critical updates) should be automatically approved. The rejected list overrides both the rules and the approve list. Create patch groups Patch groups can be defined by the type of operating system, compliance level and classification of the patch. Create a maintenance window This is the scheduler that maps through the list of registered targets and the corresponding tasks to be executed. The task registry has the document to be executed and the priority where multiple tasks are involved and attach the execution role created earlier.","title":"Patch Workflow"},{"location":"module3/indexv0/#deploy-cloudformation","text":"Click here if you're running this individually in your own AWS Account Launch the CloudFormation stack below to setup the SSM Patch Management Script: Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above (right click and open in a new tab). This will automatically take you to the console to run the template. Click Next on the Specify Template section. On the Specify Details step click Next . Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . Expected Outcome The instances which are scanned and ready to be patched using the Patch Manager will be visible under the EC2 \u2013 SSM \u2013 Managed Instances. The compliance report can be fetched with filter by tag values (\u2018Windows2012-PatchGroup\u2019 for Windows and \u2018Amz_Linux_Patch_Group\u2019 for Amazon Linux) or by instance id. The data will display the instances that are compliant and/or instances that need patching. This provides complete audit capability on your environment.","title":"Deploy CloudFormation"},{"location":"module3/indexv0/#takeaway","text":"In this module, you have set everything up for patch management on your instance. Now you know how to patch your EC2 instance in a controlled manner and how to check if your EC2 instance is compliant with the patch baseline you have defined. Of course, I recommend that you apply these steps to all EC2 instances you manage.","title":"Takeaway"},{"location":"module4/","text":"EC2 Fleet Management at Scale In this module we will put all our knowledge together from the last 3 modules to manage our EC2 Server Fleet at Scale. This implementation guide discusses architectural considerations and configuration steps for deploying the Server Fleet Management at Scale solution on the Amazon Web Services (AWS) Cloud. It includes links to an AWS CloudFormation template that launches, configures, and runs the AWS services required to deploy this solution using AWS best practices for security and availability. Overview Amazon Web Services (AWS) customers who own a fleet of servers are sometimes unsure of how to best automate their fleet management for operational efficiency and maintenance. AWS Systems Manager provides a unified user interface so customers can view operational data from multiple AWS services, and allows customers to automate operational tasks across their AWS resources. With Systems Manager, customers can maintain a consistent configuration of their Amazon Elastic Compute Cloud (Amazon EC2) or on-premises instances. They can also automate maintenance and deployment tasks, or automatically apply patches, updates, and configuration changes across any resource group. To help customers more easily leverage the capabilities of Systems Manager, AWS offers the Server Fleet Management at Scale solution. This solution combines Systems Manager with Amazon Inspector, an automated security assessment service, to help simplify software inventory management, OS patch compliance, and security vulnerability assessments on managed instances. The solution is easy-to-deploy, and automatically provisions the services necessary to automate server fleet management. Cost You are responsible for the cost of the AWS services used while running this reference deployment. As of the date of publication, the cost for running this solution with default settings in the US East (N. Virginia) Region for 100 Amazon EC2 instances, and daily Amazon Inspector assessments is approximately $562.50 per month. This pricing does not include variable charges incurred from Amazon EC2 instances, Amazon Simple Storage Service (Amazon S3), AWS Lambda, or Amazon CloudWatch. Prices are subject to change. For full details, see the pricing webpage for each AWS service you will be using in this solution. Prerequisites Terminate Instances created in earlier modules Delete the SSM Patch Management CloudFormation stack from Module 3 Architecture The AWS CloudFormation template deploys AWS Systems Manager, Amazon Inspector, an Amazon Simple Storage Service (Amazon S3) bucket, an AWS Key Management Service (AWS KMS) key, an AWS Identity and Access Management (IAM) role, an Amazon CloudWatch event, an AWS Lambda function, and an Amazon Simple Notification Service (Amazon SNS) topic. Systems Manager specifies patch compliance thresholds, defines the schedule for when patching tasks should be run, and defines the Systems Manager associations used to periodically ensure that servers remain in compliance with established configurations. Systems Manager artifacts, including patching and server execution histories and inventories, are stored in the Amazon S3 bucket and encrypted with an AWS KMS key. A CloudWatch event triggers Amazon Inspector to run daily security assessments on your fleet of Amazon Elastic Compute Cloud (Amazon EC2) instances. Amazon Inspector defines the rules packages for assessments and identifies the target Amazon EC2 instances for assessment runs. When the assessment is complete, Amazon Inspector publishes a message to an Amazon SNS topic that has two subscribers; an AWS Lambda function, and the provided email address. The function then queries Amazon Inspector for the agent IDs of the agents within the assessment run, and sends a message for each agent ID to a second Amazon SNS topic. A second Lambda function receives a notification for each agent ID and queries Amazon Inspector for the findings for each agent, sorts them by vulnerabilities, and updates the Systems Manager Inventory data for the instance under management. Note that the maximum number of agents that can be included in the assessment target of an assessment run is 500. Solution Components Systems Manager Associations The ManageInspectorAgent association runs weekly to ensure that the Inspector agent is installed on the targeted managed instances. The GatherSoftwareInventory association runs daily to gather the software inventory of the targeted managed instances. You can view a list of the managed instance\u2019s application in the Managed Instance Console Inventory tab. Maintenance Window A maintenance window allows you to define tasks that will be run against a set of instances on a given schedule. This gives you flexibility and control for how you perform routine tasks. The solution\u2019s created maintenance window is scheduled to run weekly in a two-hour window, contains a Run Command task that uses the document AWS-RunPatchBaseline to perform patching, and updates the targets defined by the Patch Group tag key and the Environment value supplied in the Managed Instances Tag Value parameter. Amazon Inspector Rules Packages Amazon Inspector compares the behavior and the security configuration of the assessment targets to selected security rules packages. Currently, this solution uses the following rules packages: Common Vulnerabilities and Exposures (CVEs) Center for Internet Security (CIS) Benchmarks AWS Security Best Practices Launch the Template Click below to deploy the Server Fleet Management At Scale CloudFormation template. The default configuration deploys AWS Systems Manager, Amazon Inspector, an Amazon Simple Storage Service (Amazon S3) bucket, an AWS Key Management Service (AWS KMS) key, an AWS Identity and Access Management (IAM) role, an Amazon CloudWatch event, an AWS Lambda function, and an Amazon Simple Notification Service (Amazon SNS) topic, but you can also customize the template based on your specific needs. Click here if you're running this individually in your own AWS Account Launch the CloudFormation stack below to setup the Server Fleet Management At Scale Solution: Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above (right click and open in a new tab). This will automatically take you to the console to run the template. Click Next on the Specify Template section. On the Specify Details step click Next . Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . Note If you delete the solution stack, all of the resources created by the AWS CloudFormation template will be deleted, except the Resource Sync Amazon S3 bucket. You must manually delete the bucket. Exercises AWS SSM Session Manager Walkthrough As customers on AWS move towards a model of deploying IT resources via Infrastructure-as-code, there is still a need for maintaining legacy applications by the old model of limited automation and manual tasks. IT administrators still need shell-level access to their servers on occasion. They might need to kill runaway processes, consult server logs, fine-tune configurations, or install temporary patches, all while maintaining a strong security profile. They want to avoid the hassle that comes with running Bastion hosts and the risks that arise when opening up inbound SSH ports on the instances. AWS already addressed some of the need for shell-level access with the AWS Systems Manager Run Command. This AWS facility gives administrators secure access to EC2 instances. It allows them to create command documents and run them on any desired set of EC2 instances, with support for both Linux and Microsoft Windows. The commands are run asynchronously, with output captured for review. Session Manager makes the AWS Systems Manager even more powerful. You can now use a browser-based interactive shell and a command-line interface (CLI) to manage your Windows and Linux instances. Here\u2019s what you get: Secure Access \u2013 You don\u2019t have to manually set up user accounts, passwords, or SSH keys on the instances and you don\u2019t have to open up any inbound ports. Session Manager communicates with the instances via the SSM Agent across an encrypted tunnel that originates on the instance, and does not require a bastion host. Access Control \u2013 You use IAM policies and users to control access to your instances, and don\u2019t need to distribute SSH keys. You can limit access to a desired time/maintenance window by using IAM\u2019s Date Condition Operators. Auditability \u2013 Commands and responses can be logged to Amazon CloudWatch and to an S3 bucket. You can arrange to receive an SNS notification when a new session is started. Interactivity \u2013 Commands are executed synchronously in a full interactive bash (Linux) or PowerShell (Windows) environment Programming and Scripting \u2013 In addition to the console access that I will show you in a moment, you can also initiate sessions from the command line (aws ssm ...) or via the Session Manager APIs. The SSM Agent running on the EC2 instances must be able to connect to Session Manager\u2019s public endpoint. You can also set up a PrivateLink connection to allow instances running in private VPCs (without Internet access or a public IP address) to connect to Session Manager. Session Manager in Action Navigate to the AWS Systems Manager console and select Session Manager under the Instance & Nodes drop down. Then click Start session Info In the Target instances list, choose the radio button to the left of the instance you want to connect to. In order to use Session Manager to access your EC2 instances, the instances must be running the latest version (2.3.12 or above) of the SSM Agent. The instance profile for the instances must reference a policy that allows access to the appropriate services; you can create your own or use AmazonEC2RoleForSSM. You have walked through this exercise in Module 3 and the sample fleet deployed in this exercise have been launched with the necessary instance profile. Select the Linux AMI and click Start Session The session opens up immediately: Similarly, with the Windows instance, you can see a session below: What is a Session? A session is a connection made to an instance using Session Manager. Sessions are based on a secure bi-directional communication channel between the client (you) and the remote managed instance that streams inputs and outputs for commands. Traffic between a client and a managed instance is encrypted using TLS 1.2, and requests to create the connection are signed using Sigv4. This two-way communication enables interactive bash and PowerShell access to instances. When you start a session, AWS SSM Session Manager initiates a connection to a target (for example, an instance) for a Session Manager session. In the background, a WebSocket connection is open for sending input and receiving outputs. Analyze your fleet with Insights Enable AWS Config Rules Sign in to the AWS Management Console and open AWS Config . In the left navigation, choose Rules. On the Rules page, choose Add rule. On the Rules page, you can do the following: Type in the search field to filter results by rule name, description, and label. For example, type EC2 to return rules that evaluate EC2 resource types. Select the following rules: ec2-instance-managed-by-systems-manager - Checks whether the Amazon EC2 instances in your account are managed by AWS Systems Manager. ec2-managedinstance-patch-compliance-status-check - Checks whether the compliance status of the AWS Systems Manager patch compliance is COMPLIANT or NON_COMPLIANT after the patch installation on the instance. Analyzing your Fleet with Resource Groups From within the Management Console, go to Systems Manager. Click on Resource Groups and then Create Resource Group. Choose CloudFormation stack based Group Type Select the Server-Fleet-Mngmt-At-Scale CloudFormation stack you created earlier and the resource type AWS::EC2:Instance Give the group and name and click Create Group View Config Rule Compliance For more details into the Resource Compliance status, click the Resource compliance drop-down. You can get more details about these non-compliant instances from the AWS Config Console as well. Click Inventory on the Navigation pane. You can now get more insights into your EC2 Fleet\u2019s inventory. You can filter by resource groups, tags or inventory types.","title":"Module 4: Fleet Management at Scale"},{"location":"module4/#ec2-fleet-management-at-scale","text":"In this module we will put all our knowledge together from the last 3 modules to manage our EC2 Server Fleet at Scale. This implementation guide discusses architectural considerations and configuration steps for deploying the Server Fleet Management at Scale solution on the Amazon Web Services (AWS) Cloud. It includes links to an AWS CloudFormation template that launches, configures, and runs the AWS services required to deploy this solution using AWS best practices for security and availability.","title":"EC2 Fleet Management at Scale"},{"location":"module4/#overview","text":"Amazon Web Services (AWS) customers who own a fleet of servers are sometimes unsure of how to best automate their fleet management for operational efficiency and maintenance. AWS Systems Manager provides a unified user interface so customers can view operational data from multiple AWS services, and allows customers to automate operational tasks across their AWS resources. With Systems Manager, customers can maintain a consistent configuration of their Amazon Elastic Compute Cloud (Amazon EC2) or on-premises instances. They can also automate maintenance and deployment tasks, or automatically apply patches, updates, and configuration changes across any resource group. To help customers more easily leverage the capabilities of Systems Manager, AWS offers the Server Fleet Management at Scale solution. This solution combines Systems Manager with Amazon Inspector, an automated security assessment service, to help simplify software inventory management, OS patch compliance, and security vulnerability assessments on managed instances. The solution is easy-to-deploy, and automatically provisions the services necessary to automate server fleet management. Cost You are responsible for the cost of the AWS services used while running this reference deployment. As of the date of publication, the cost for running this solution with default settings in the US East (N. Virginia) Region for 100 Amazon EC2 instances, and daily Amazon Inspector assessments is approximately $562.50 per month. This pricing does not include variable charges incurred from Amazon EC2 instances, Amazon Simple Storage Service (Amazon S3), AWS Lambda, or Amazon CloudWatch. Prices are subject to change. For full details, see the pricing webpage for each AWS service you will be using in this solution.","title":"Overview"},{"location":"module4/#prerequisites","text":"Terminate Instances created in earlier modules Delete the SSM Patch Management CloudFormation stack from Module 3","title":"Prerequisites"},{"location":"module4/#architecture","text":"The AWS CloudFormation template deploys AWS Systems Manager, Amazon Inspector, an Amazon Simple Storage Service (Amazon S3) bucket, an AWS Key Management Service (AWS KMS) key, an AWS Identity and Access Management (IAM) role, an Amazon CloudWatch event, an AWS Lambda function, and an Amazon Simple Notification Service (Amazon SNS) topic. Systems Manager specifies patch compliance thresholds, defines the schedule for when patching tasks should be run, and defines the Systems Manager associations used to periodically ensure that servers remain in compliance with established configurations. Systems Manager artifacts, including patching and server execution histories and inventories, are stored in the Amazon S3 bucket and encrypted with an AWS KMS key. A CloudWatch event triggers Amazon Inspector to run daily security assessments on your fleet of Amazon Elastic Compute Cloud (Amazon EC2) instances. Amazon Inspector defines the rules packages for assessments and identifies the target Amazon EC2 instances for assessment runs. When the assessment is complete, Amazon Inspector publishes a message to an Amazon SNS topic that has two subscribers; an AWS Lambda function, and the provided email address. The function then queries Amazon Inspector for the agent IDs of the agents within the assessment run, and sends a message for each agent ID to a second Amazon SNS topic. A second Lambda function receives a notification for each agent ID and queries Amazon Inspector for the findings for each agent, sorts them by vulnerabilities, and updates the Systems Manager Inventory data for the instance under management. Note that the maximum number of agents that can be included in the assessment target of an assessment run is 500.","title":"Architecture"},{"location":"module4/#solution-components","text":"","title":"Solution Components"},{"location":"module4/#systems-manager-associations","text":"The ManageInspectorAgent association runs weekly to ensure that the Inspector agent is installed on the targeted managed instances. The GatherSoftwareInventory association runs daily to gather the software inventory of the targeted managed instances. You can view a list of the managed instance\u2019s application in the Managed Instance Console Inventory tab.","title":"Systems Manager Associations"},{"location":"module4/#maintenance-window","text":"A maintenance window allows you to define tasks that will be run against a set of instances on a given schedule. This gives you flexibility and control for how you perform routine tasks. The solution\u2019s created maintenance window is scheduled to run weekly in a two-hour window, contains a Run Command task that uses the document AWS-RunPatchBaseline to perform patching, and updates the targets defined by the Patch Group tag key and the Environment value supplied in the Managed Instances Tag Value parameter.","title":"Maintenance Window"},{"location":"module4/#amazon-inspector-rules-packages","text":"Amazon Inspector compares the behavior and the security configuration of the assessment targets to selected security rules packages. Currently, this solution uses the following rules packages: Common Vulnerabilities and Exposures (CVEs) Center for Internet Security (CIS) Benchmarks AWS Security Best Practices","title":"Amazon Inspector Rules Packages"},{"location":"module4/#launch-the-template","text":"Click below to deploy the Server Fleet Management At Scale CloudFormation template. The default configuration deploys AWS Systems Manager, Amazon Inspector, an Amazon Simple Storage Service (Amazon S3) bucket, an AWS Key Management Service (AWS KMS) key, an AWS Identity and Access Management (IAM) role, an Amazon CloudWatch event, an AWS Lambda function, and an Amazon Simple Notification Service (Amazon SNS) topic, but you can also customize the template based on your specific needs. Click here if you're running this individually in your own AWS Account Launch the CloudFormation stack below to setup the Server Fleet Management At Scale Solution: Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above (right click and open in a new tab). This will automatically take you to the console to run the template. Click Next on the Specify Template section. On the Specify Details step click Next . Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . Note If you delete the solution stack, all of the resources created by the AWS CloudFormation template will be deleted, except the Resource Sync Amazon S3 bucket. You must manually delete the bucket.","title":"Launch the Template"},{"location":"module4/#exercises","text":"","title":"Exercises"},{"location":"module4/#aws-ssm-session-manager-walkthrough","text":"As customers on AWS move towards a model of deploying IT resources via Infrastructure-as-code, there is still a need for maintaining legacy applications by the old model of limited automation and manual tasks. IT administrators still need shell-level access to their servers on occasion. They might need to kill runaway processes, consult server logs, fine-tune configurations, or install temporary patches, all while maintaining a strong security profile. They want to avoid the hassle that comes with running Bastion hosts and the risks that arise when opening up inbound SSH ports on the instances. AWS already addressed some of the need for shell-level access with the AWS Systems Manager Run Command. This AWS facility gives administrators secure access to EC2 instances. It allows them to create command documents and run them on any desired set of EC2 instances, with support for both Linux and Microsoft Windows. The commands are run asynchronously, with output captured for review. Session Manager makes the AWS Systems Manager even more powerful. You can now use a browser-based interactive shell and a command-line interface (CLI) to manage your Windows and Linux instances. Here\u2019s what you get: Secure Access \u2013 You don\u2019t have to manually set up user accounts, passwords, or SSH keys on the instances and you don\u2019t have to open up any inbound ports. Session Manager communicates with the instances via the SSM Agent across an encrypted tunnel that originates on the instance, and does not require a bastion host. Access Control \u2013 You use IAM policies and users to control access to your instances, and don\u2019t need to distribute SSH keys. You can limit access to a desired time/maintenance window by using IAM\u2019s Date Condition Operators. Auditability \u2013 Commands and responses can be logged to Amazon CloudWatch and to an S3 bucket. You can arrange to receive an SNS notification when a new session is started. Interactivity \u2013 Commands are executed synchronously in a full interactive bash (Linux) or PowerShell (Windows) environment Programming and Scripting \u2013 In addition to the console access that I will show you in a moment, you can also initiate sessions from the command line (aws ssm ...) or via the Session Manager APIs. The SSM Agent running on the EC2 instances must be able to connect to Session Manager\u2019s public endpoint. You can also set up a PrivateLink connection to allow instances running in private VPCs (without Internet access or a public IP address) to connect to Session Manager. Session Manager in Action Navigate to the AWS Systems Manager console and select Session Manager under the Instance & Nodes drop down. Then click Start session Info In the Target instances list, choose the radio button to the left of the instance you want to connect to. In order to use Session Manager to access your EC2 instances, the instances must be running the latest version (2.3.12 or above) of the SSM Agent. The instance profile for the instances must reference a policy that allows access to the appropriate services; you can create your own or use AmazonEC2RoleForSSM. You have walked through this exercise in Module 3 and the sample fleet deployed in this exercise have been launched with the necessary instance profile. Select the Linux AMI and click Start Session The session opens up immediately: Similarly, with the Windows instance, you can see a session below: What is a Session? A session is a connection made to an instance using Session Manager. Sessions are based on a secure bi-directional communication channel between the client (you) and the remote managed instance that streams inputs and outputs for commands. Traffic between a client and a managed instance is encrypted using TLS 1.2, and requests to create the connection are signed using Sigv4. This two-way communication enables interactive bash and PowerShell access to instances. When you start a session, AWS SSM Session Manager initiates a connection to a target (for example, an instance) for a Session Manager session. In the background, a WebSocket connection is open for sending input and receiving outputs.","title":"AWS SSM Session Manager Walkthrough"},{"location":"module4/#analyze-your-fleet-with-insights","text":"Enable AWS Config Rules Sign in to the AWS Management Console and open AWS Config . In the left navigation, choose Rules. On the Rules page, choose Add rule. On the Rules page, you can do the following: Type in the search field to filter results by rule name, description, and label. For example, type EC2 to return rules that evaluate EC2 resource types. Select the following rules: ec2-instance-managed-by-systems-manager - Checks whether the Amazon EC2 instances in your account are managed by AWS Systems Manager. ec2-managedinstance-patch-compliance-status-check - Checks whether the compliance status of the AWS Systems Manager patch compliance is COMPLIANT or NON_COMPLIANT after the patch installation on the instance. Analyzing your Fleet with Resource Groups From within the Management Console, go to Systems Manager. Click on Resource Groups and then Create Resource Group. Choose CloudFormation stack based Group Type Select the Server-Fleet-Mngmt-At-Scale CloudFormation stack you created earlier and the resource type AWS::EC2:Instance Give the group and name and click Create Group View Config Rule Compliance For more details into the Resource Compliance status, click the Resource compliance drop-down. You can get more details about these non-compliant instances from the AWS Config Console as well. Click Inventory on the Navigation pane. You can now get more insights into your EC2 Fleet\u2019s inventory. You can filter by resource groups, tags or inventory types.","title":"Analyze your fleet with Insights"}]}