AWSTemplateFormatVersion: 2010-09-09
Description: ''
Resources:
  ArchiveLogsBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      LifecycleConfiguration:
        Rules:
          - Id: Transition90daysRetain7yrs
            Status: Enabled
            ExpirationInDays: 2555
            Transition:
              TransitionInDays: 90
              StorageClass: STANDARD_IA
      VersioningConfiguration:
        Status: Enabled
  ArchiveLogsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    DependsOn: ArchiveLogsBucket
    Properties:
      Bucket: !Ref ArchiveLogsBucket
      PolicyDocument:
        Statement:
          - Sid: Enforce HTTPS Connections
            Action: 's3:*'
            Effect: Deny
            Principal: '*'
            Resource: !Sub 'arn:aws:s3:::${ArchiveLogsBucket}/*'
            Condition:
              Bool:
                'aws:SecureTransport': false
          - Sid: Restrict Delete* Actions
            Action: 's3:Delete*'
            Effect: Deny
            Principal: '*'
            Resource: !Sub 'arn:aws:s3:::${ArchiveLogsBucket}/*'
  cTrailS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref ArchiveLogsBucket
        LogFilePrefix: cloudtraillogs
  BucketPolicy:
    DependsOn:
      - cTrailS3Bucket
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref cTrailS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 's3:GetBucketAcl'
            Resource: !Sub 'arn:aws:s3:::${cTrailS3Bucket}'
          - Sid: AWSCloudTrailWrite20150319
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 's3:PutObject'
            Resource: !Sub 'arn:aws:s3:::${cTrailS3Bucket}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control
          - Sid: Enforce HTTPS Connections
            Action: 's3:*'
            Effect: Deny
            Principal: '*'
            Resource: !Sub 'arn:aws:s3:::${cTrailS3Bucket}/*'
            Condition:
              Bool:
                'aws:SecureTransport': false
          - Sid: Restrict Delete* Actions
            Action: 's3:Delete*'
            Effect: Deny
            Principal: '*'
            Resource: !Sub 'arn:aws:s3:::${cTrailS3Bucket}/*'
  cloudTrail:
    DependsOn:
      - BucketPolicy
      - cTrailS3Bucket
    Type: 'AWS::CloudTrail::Trail'
    Properties:
      S3BucketName: !Ref cTrailS3Bucket
      IsLogging: true
      EnableLogFileValidation: true
      IncludeGlobalServiceEvents: true
      CloudWatchLogsLogGroupArn: !GetAtt
        - TrailLogGroup
        - Arn
      CloudWatchLogsRoleArn: !GetAtt
        - TrailLogGroupRole
        - Arn
  TrailLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 90
  TrailLogGroupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AssumeRole1
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: CIS-cloudtrail-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AWSCloudTrailCreateLogStream
                Effect: Allow
                Action: 'logs:CreateLogStream'
                Resource: !GetAtt
                  - TrailLogGroup
                  - Arn
              - Sid: AWSCloudTrailPutLogEvents
                Effect: Allow
                Action: 'logs:PutLogEvents'
                Resource: !GetAtt
                  - TrailLogGroup
                  - Arn
  ASGInfoTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: asgName
          AttributeType: S
      KeySchema:
        - AttributeName: asgName
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: AutoTag-ASGInfo
  EC2EventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: >-
        Trigger a Lambda function anytime a new EC2 resource is created (EC2
        instance, EBS volume, EBS Snapshot or AMI)
      EventPattern:
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - ec2.amazonaws.com
            - autoscaling.amazonaws.com
          eventName:
            - CreateVolume
            - RunInstances
            - CreateImage
            - CreateSnapshot
            - CreateAutoScalingGroup
            - DeleteAutoScalingGroup
      Name: New-EC2Resource-Event
      State: ENABLED
      Targets:
        - Arn: !Ref ProductionAlias
          Id: Production
  AutoScalingEventsRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: >-
        Trigger a Lambda function anytime a Auto Scaling instance launch
        successful event is received
      EventPattern:
        source:
          - aws.autoscaling
        detail-type:
          - EC2 Instance Launch Successful
      Name: ASG-EC2LaunchSuccessful-Event
      State: ENABLED
      Targets:
        - Arn: !Ref ProductionAlias
          Id: Production
  CFAutoTag:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: wkshp-avmw-cfn-templates-q3klzl70esd4zsc6
        S3Key: Lambda/auto-tag-lambda-fn.zip
      Description: This function tags EC2 Resources in response to Cloudwatch Events.
      Handler: index.lambda_handler
      Role: !GetAtt
        - LambdaAutoTagRole
        - Arn
      Runtime: python3.6
      Timeout: '60'
  StableVersion:
    Type: 'AWS::Lambda::Version'
    Properties:
      FunctionName: !Ref CFAutoTag
      Description: Stable version
  ProductionAlias:
    Type: 'AWS::Lambda::Alias'
    Properties:
      FunctionName: !Ref CFAutoTag
      FunctionVersion: !GetAtt
        - StableVersion
        - Version
      Name: PROD
  PermissionForEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref ProductionAlias
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - EC2EventRule
        - Arn
  PermissionForAutoScalingEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref ProductionAlias
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - AutoScalingEventsRule
        - Arn
  LambdaAutoTagRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaPolicyForAutoTagging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: Stmt1458923097000
                Effect: Allow
                Action:
                  - 'cloudtrail:LookupEvents'
                Resource:
                  - '*'
              - Sid: Stmt1458923121000
                Effect: Allow
                Action:
                  - 'ec2:CreateTags'
                  - 'ec2:Describe*'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
              - Sid: AllAPIActionsOnAutoTagTable
                Effect: Allow
                Action: 'dynamodb:*'
                Resource: !Sub >-
                  arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AutoTag-ASGInfo
