AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Asset Inventory and AMI Factory - This Cloudformation template
  creates resources required to set up a Golden AMI Pipeline
Parameters:
  productName:
    Type: String
    Default: DevOpsAMI-1.0
    Description: >-
      ProductName-ProductVersion combination of the product for which you intend
      to use the pipeline. You get to override this later when you trigger
      automation workflow.
  productOSAndVersion:
    Type: String
    Default: AmazonLinux2AMI2.0.20200520.1x86_64HVMgp2
    Description: >-
      Operating system name and OS version. You get to override this later when
      you trigger automation workflow.
  buildVersion:
    Type: String
    Default: '1'
    Description: >-
      Build-Version corresponding to your product. Note - This is just a default
      value, you get to override this later when you trigger automation
      workflow.
  ApproverARN:
    Type: String
    AllowedPattern: >-
      ^(?!\s*$).+
    Description: >-
      AWS authenticated principals who are able to either approve or reject the
      Golden AMI. You can specify principals by using an AWS Identity and Access
      Management (IAM) user name, IAM user ARN, IAM role ARN, or an IAM assume
      role user ARN
  EmailID:
    Type: String
    AllowedPattern: >-
      ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    Description: >-
      Your email ID for receiving Inspector assessment results and golden AMI
      creation notification.
  instanceType:
    Type: String
    Default: t3.large
    Description: >-
      Specify the the InstanceType compatible with all your golden AMIs. This
      InstanceType will be used for launching continuous vulnerability
      assessment of golden AMIs.
  continuousInspectionFrequency:
    Type: String
    Default: rate(1 day)
    Description: >-
      Frequency for setting up continuous inspection of your AMIs. For syntax,
      check -
      https://docs.aws.amazon.com/lambda/latest/dg/tutorial-scheduled-events-schedule-expressions.html
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 10.0.0.0/16
  subnetPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC
  subnetPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  PublicVPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: PublicVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref subnetPublic
      RouteTableId: !Ref PublicRouteTable
  NAT:
    DependsOn: PublicVPCGatewayAttachment
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt
        - EIP
        - AllocationId
      SubnetId: !Ref subnetPublic
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: PublicVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref subnetPrivate
      RouteTableId: !Ref PrivateRouteTable
  secGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow HTTP traffic
      SecurityGroupIngress: []
  GoldenAMIConfigBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  GoldenAmiConfigBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    DependsOn: ManagedInstanceRole
    Properties:
      Bucket: !Ref GoldenAMIConfigBucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:*'
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref GoldenAMIConfigBucket
                  - /*
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref GoldenAMIConfigBucket
            Principal:
              AWS:
                - !GetAtt
                  - ManagedInstanceRole
                  - Arn
                - !GetAtt
                  - AutomationServiceRole
                  - Arn
                - !GetAtt
                  - PublishAMILambdaRole
                  - Arn
  PublishAMILambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: PublishAMILambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter*'
                Resource: !Join
                  - ''
                  - - 'arn:aws:ssm:'
                    - '*'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':parameter/GoldenAMI/*'
              - Effect: Allow
                Action:
                  - 's3:GetObject*'
                  - 's3:PutObject*'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref GoldenAMIConfigBucket
                      - /*
              - Effect: Allow
                Action:
                  - 'servicecatalog:SearchProductsAsAdmin'
                  - 'servicecatalog:CreateProvisioningArtifact'
                  - 'servicecatalog:CreateProduct'
                  - 'cloudformation:ValidateTemplate'
                Resource: '*'
  ApproverTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Id: ApproverTopicPolicy
        Version: 2012-10-17
        Statement:
          - Sid: ApproverTopicPolicySID
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt
                  - AutomationServiceRole
                  - Arn
            Action: 'sns:Publish'
            Resource: !Ref ApproverNotification
      Topics:
        - !Ref ApproverNotification
  ApproverNotification:
    Type: 'AWS::SNS::Topic'
  ApproverNotificationSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !Ref EmailID
      Protocol: email
      TopicArn: !Ref ApproverNotification
  PublishAMILambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt
        - PublishAMILambdaRole
        - Arn
      Code:
        ZipFile: !Join
          - |+

          - - import boto3
            - import json
            - from dateutil import parser
            - import dateutil
            - import datetime
            - import collections
            - import os
            - import time
            - 'def lambda_handler(event, context):'
            - '    sourceRegion = os.environ[''AWS_DEFAULT_REGION'']'
            - '    s3 = boto3.resource(''s3'')'
            - '    prodName=event[''productNameAndVersion'']'
            - '    prodOS=event[''productOSAndVersion'']'
            - '    bucket =event[''bucketName'']'
            - '    s3FilePrefix=event[''templateFileName'']'
            - '    version=event[''versionToBeCreated'']'
            - '    amiRegionMappingParamName =event[''amiRegionMappingParamName'']'
            - '    filepath=''/tmp/''+s3FilePrefix'
            - '    object=s3.Object(bucket,s3FilePrefix)'
            - '    text=object.get()["Body"].read().decode(''utf-8'') '
            - '    amiIDParamPath = ''/GoldenAMI/''+prodOS+''/''+prodName+''/''+event[''versionToBeCreated'']'
            - '    text=text.replace(''AMI_ID_TO_REPLACE'', amiIDParamPath)'
            - '    with open(filepath, mode=''w'',encoding=''utf-8'') as file:'
            - '        file.write(text)'
            - '    s3.meta.client.upload_file(filepath,bucket,s3FilePrefix+''/versions/''+version)'
            - '    ssm = boto3.client(''ssm'',os.environ[''AWS_DEFAULT_REGION''])'
            - '    amiIDRegionMapping =  ssm.get_parameter(Name=amiRegionMappingParamName)[''Parameter''][''Value'']'
            - '    mappingJSON = json.loads(amiIDRegionMapping)'
            - '    for region, amiID in mappingJSON.items():'
            - '        sc = boto3.client(''servicecatalog'',region)'
            - '        scProduct='''''
            - '        products = sc.search_products_as_admin(ProductSource=''ACCOUNT'')'
            - '        for product in products[''ProductViewDetails'']:'
            - '            productName = product[''ProductViewSummary''][''Name'']'
            - '            if productName == prodName+''-''+prodOS:    '
            - '                scProduct=product[''ProductViewSummary''][''ProductId'']'
            - '                sc.create_provisioning_artifact(ProductId=scProduct,Parameters={''Name'': version,''Description'': ''This is version ''+version,''Info'': {''LoadTemplateFromURL'': ''https://s3.amazonaws.com/''+bucket+''/''+s3FilePrefix+''/versions/''+version},''Type'': ''CLOUD_FORMATION_TEMPLATE''},IdempotencyToken=str(round(time.time() * 1000)))'
            - '        if scProduct == '''':'
            - '            print(''SC product not found, creating a product'')'
            - '            result = sc.create_product(Name=prodName+''-''+prodOS,Owner=''CCOE'',ProductType=''CLOUD_FORMATION_TEMPLATE'', Description=''This product can be used to launch ''+prodName+'' in ''+prodOS+'' environment.'', Tags=[{''Key'': ''ProductName'',''Value'': prodName+''-''+prodOS}],ProvisioningArtifactParameters={''Name'':version,''Description'': ''This is version ''+version,''Info'': {''LoadTemplateFromURL'': ''https://s3.amazonaws.com/''+bucket+''/''+s3FilePrefix+''/versions/''+version},''Type'': ''CLOUD_FORMATION_TEMPLATE''},IdempotencyToken=str(round(time.time() * 1000)))'
            - '    return ''Done'';'
      Runtime: python3.6
      Timeout: 300
      Handler: index.lambda_handler
      MemorySize: 512
  DecommissionAMIVersionLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: DecommissionAMIVersionLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter*'
                  - 'ssm:PutParameter*'
                  - 'ssm:delete*'
                Resource: !Join
                  - ''
                  - - 'arn:aws:ssm:'
                    - '*'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':parameter/GoldenAMI/*'
              - Effect: Allow
                Action:
                  - 's3:delete*'
                  - 's3:get*'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref GoldenAMIConfigBucket
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref GoldenAMIConfigBucket
              - Effect: Allow
                Action:
                  - 'ec2:DeregisterImage'
                  - 'ec2:DescribeSnapshots'
                  - 'ec2:DeleteSnapshot'
                  - 'sc:list*'
                  - 'sc:search*'
                  - 'servicecatalog:SearchProductsAsAdmin'
                  - 'servicecatalog:ListProvisioningArtifacts'
                  - 'servicecatalog:DeleteProduct'
                  - 'servicecatalog:DeleteProvisioningArtifact'
                Resource: '*'
  DecommissionAMIVersionLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt
        - DecommissionAMIVersionLambdaRole
        - Arn
      Code:
        ZipFile: !Join
          - ''
          - - |+

            - import boto3
            - |+

            - import json
            - |+

            - from dateutil import parser
            - |+

            - import dateutil
            - |+

            - import datetime
            - |+

            - import collections
            - |+

            - import os
            - |+

            - import time
            - |+

            - import botocore
            - |+

            - 'def lambda_handler(event, context):'
            - |+

            - '    sourceRegion = os.environ[''AWS_DEFAULT_REGION'']'
            - |+

            - '    s3 = boto3.resource(''s3'')'
            - |+

            - '    prodName=event[''productNameAndVersion'']'
            - |+

            - '    prodOS=event[''productOSAndVersion'']'
            - |+

            - '    bucketName =event[''bucketName'']'
            - |+

            - '    s3FilePrefix=event[''templateFileName'']'
            - |+

            - '    version=event[''versionToBeDeleted'']'
            - |+

            - '    amiRegionMappingParamName =event[''amiRegionMappingParamName'']'
            - |+

            - '    prefix=''/GoldenAMI/''+prodOS+''/''+prodName+''/''+version'
            - |+

            - '    s3 = boto3.resource(''s3'')'
            - |+

            - '    masterAmis=''/GoldenAMI/latest'''
            - |+

            - '    bucket = s3.Bucket(bucketName)'
            - |+

            - '    bucket.delete_objects(Delete={''Objects'': [{''Key'': s3FilePrefix+''/versions/''+version } ] })'
            - |+

            - '    ssm = boto3.client(''ssm'',sourceRegion)'
            - |+

            - '    amiIDRegionMapping='''''
            - |+

            - '    params= [prefix+''/latestInstance'',prefix+''/LatestAssessmentRunARN'',prefix+''/NumCVEs'',prefix+''/assessmentLink'',prefix+''/assessmentTemplateARN'']'
            - |+

            - '    try:'
            - |+

            - '        amiIDRegionMapping =  ssm.get_parameter(Name=amiRegionMappingParamName)[''Parameter''][''Value'']'
            - |+

            - '    except botocore.exceptions.ClientError as e:'
            - |+

            - '        if e.response[''Error''][''Code''] == ''ParameterNotFound'':'
            - |+

            - '            amiID= ssm.get_parameter(Name=prefix)[''Parameter''][''Value'']'
            - |+

            - '            ec2 = boto3.client(''ec2'')'
            - |+

            - '            ec2.deregister_image(ImageId=amiID)'
            - |+

            - '            time.sleep(5)'
            - |+

            - '            snaps = ec2.describe_snapshots()'
            - |+

            - '            for snap in snaps[''Snapshots'']: '
            - |+

            - '                if amiID in snap[''Description'']:'
            - |+

            - '                    ec2.delete_snapshot(SnapshotId=snap[''SnapshotId''])'
            - |+

            - '            ssm.delete_parameters(Names=params)'
            - |+

            - '            try:'
            - |+

            - '                temp =  ssm.get_parameter(Name=masterAmis)[''Parameter''][''Value'']'
            - |+

            - '                temp= temp.replace(amiID+'','','''').replace('',''+amiID,'''').replace(amiID,'''')'
            - |+

            - '                if len(temp) == 0:'
            - |+

            - '                    ssm.delete_parameters(Names=[masterAmis])'
            - |+

            - '                else:'
            - |+

            - '                    ssm.put_parameter(Name=masterAmis,Type=''String'', Value=temp,Overwrite=True)'
            - |+

            - '                return ''Done'''
            - |+

            - '            except botocore.exceptions.ClientError as e:'
            - |+

            - '                if e.response[''Error''][''Code''] == ''ParameterNotFound'':'
            - |+

            - '                    print(''This indicates that the active amis are not present'')'
            - |+

            - '            return ''Done'''
            - |+

            - '    mappingJSON = json.loads(amiIDRegionMapping)'
            - |+

            - '    for region,amiID in mappingJSON.items():'
            - |+

            - '        sc = boto3.client(''servicecatalog'',region)'
            - |+

            - '        products = sc.search_products_as_admin(ProductSource=''ACCOUNT'')'
            - |+

            - '        for product in products[''ProductViewDetails'']:'
            - |+

            - '            productName = product[''ProductViewSummary''][''Name'']'
            - |+

            - '            if productName == prodName+''-''+prodOS:'
            - |+

            - '                productID=product[''ProductViewSummary''][''ProductId'']'
            - |+

            - '                provisioningArtifacts = sc.list_provisioning_artifacts(ProductId=productID)[''ProvisioningArtifactDetails'']'
            - |+

            - '                if len(provisioningArtifacts) == 1:'
            - |+

            - '                    sc.delete_product(Id=productID)'
            - |+

            - '                else:'
            - |+

            - '                    for artifact in provisioningArtifacts:'
            - |+

            - '                        if artifact[''Name''] == version:'
            - |+

            - '                            sc.delete_provisioning_artifact(ProductId=productID,ProvisioningArtifactId=artifact[''Id''])'
            - |+

            - '        ec2 = boto3.client(''ec2'',region)'
            - |+

            - '        ec2.deregister_image(ImageId=amiID)'
            - |+

            - '        time.sleep(5)'
            - |+

            - '        snaps = ec2.describe_snapshots()'
            - |+

            - '        for snap in snaps[''Snapshots'']:'
            - |+

            - '            if amiID in snap[''Description'']:'
            - |+

            - '                ec2.delete_snapshot(SnapshotId=snap[''SnapshotId''])'
            - |+

            - '        ssm = boto3.client(''ssm'',region)'
            - |+

            - '        ssm.delete_parameters(Names=[prefix])'
            - |+

            - '        temp =  ssm.get_parameter(Name=masterAmis)[''Parameter''][''Value'']'
            - |+

            - '        temp= temp.replace(amiID+'','','''').replace('',''+amiID,'''').replace(amiID,'''')'
            - |+

            - '        if len(temp) == 0:'
            - |+

            - '            ssm.delete_parameters(Names=[masterAmis])'
            - |+

            - '        else:'
            - |+

            - '            ssm.put_parameter(Name=masterAmis,Type=''String'', Value=temp,Overwrite=True)'
            - |+

            - '        if region == sourceRegion:'
            - |+

            - '            ssm.delete_parameters(Names=params)'
            - |+

            - '    return ''Done'';'
      Runtime: python3.6
      Timeout: 300
      Handler: index.lambda_handler
      MemorySize: 512
  AppendParamLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AppendSsmParamLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter*'
                  - 'ssm:PutParameter*'
                Resource: !Join
                  - ''
                  - - 'arn:aws:ssm:'
                    - '*'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':parameter/GoldenAMI/*'
  AppendParamLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt
        - AppendParamLambdaRole
        - Arn
      Code:
        ZipFile: !Join
          - ''
          - - |+

            - import json
            - |+

            - import boto3
            - |+

            - import botocore
            - |+

            - 'def lambda_handler(event, context):'
            - |+

            - '    paramName =event[''parameterName''];'
            - |+

            - '    amiIDVal=event[''valueToBeCreatedOrAppended'']'
            - |+

            - '    print(amiIDVal)'
            - |+

            - '    amiID=amiIDVal.replace("'
            - \\r\\n
            - '","\n")'
            - |+

            - '    print(amiID)'
            - |+

            - '    ssm = boto3.client(''ssm'')'
            - |+

            - '    try:'
            - |+

            - '        AMIIdsParam =ssm.get_parameter(Name=paramName)'
            - |+

            - '        AMIIds=AMIIdsParam[''Parameter''][''Value'']'
            - |+

            - '        AMIIds= AMIIds+'',''+ amiID'
            - |+

            - '        ssm.put_parameter(Name=paramName,Type=''String'', Value=AMIIds,Overwrite=True)'
            - |+

            - '    except botocore.exceptions.ClientError as e:'
            - |+

            - '        if e.response[''Error''][''Code''] == ''ParameterNotFound'':'
            - |+

            - '            ssm.put_parameter(Name=paramName,Type=''String'', Value=amiID,Overwrite=True)'
            - |+

            - '    return ''appended parameter %s with value %s.'' % (paramName,amiID)'
      Runtime: python3.6
      Timeout: 300
      Handler: index.lambda_handler
      MemorySize: 512
  RunInspectorLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonInspectorFullAccess'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: RunInspectorLambdaExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'ssm:PutParameter'
                Resource: !Join
                  - ''
                  - - 'arn:aws:ssm:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':parameter/GoldenAMI/*'
  RunInspectorLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt
        - RunInspectorLambdaExecutionRole
        - Arn
      Code:
        ZipFile: !Join
          - |+

          - - import json
            - import urllib.parse
            - import boto3
            - import time
            - import os
            - 'def lambda_handler(event, context):'
            - '    amiId = event[''AMI-ID'']'
            - '    instanceId = event[''instanceId'']'
            - '    productOS = event.get(''productOS'')'
            - '    productName = event.get(''productName'')'
            - '    productVersion = event.get(''productVersion'')'
            - '    topicArn=event[''topicArn'']'
            - '    fullName = amiId+''-''+productOS+''/''+productName+''/''+productVersion'
            - '    region = os.environ["AWS_DEFAULT_REGION"]'
            - '    '
            - '    assessmentTemplateArn="";'
            - '    '
            - '    ec2Source =boto3.resource(''ec2'',region)'
            - '    inspector = boto3.client(''inspector'',region) '
            - '    ssm = boto3.client(''ssm'',region) '
            - '    rules = inspector.list_rules_packages();'
            - '    ParamName=''/GoldenAMI/''+productOS+''/''+productName+''/''+productVersion+''/latestInstance'''
            - '    ssm.put_parameter(Name=ParamName,Value=instanceId,Type=''String'',Overwrite=True) '
            - '    millis = int(round(time.time() * 1000))'
            - '    existingTemplates = inspector.list_assessment_templates(filter={''namePattern'': amiId+''-''+productOS+''/''+productName+''/''+productVersion})'
            - '    print("Total length found:"+str(len(existingTemplates[''assessmentTemplateArns''])))'
            - '    if len(existingTemplates[''assessmentTemplateArns''])==0:'
            - '        resGroup = inspector.create_resource_group(resourceGroupTags=[{''key'': ''Type'',''value'': amiId+''-''+productOS+''/''+productName+''/''+productVersion}])'
            - '        target = inspector.create_assessment_target(assessmentTargetName=fullName,resourceGroupArn=resGroup[''resourceGroupArn''])'
            - '        template = inspector.create_assessment_template(assessmentTargetArn=target[''assessmentTargetArn''],assessmentTemplateName=amiId+''/''+productOS+''/''+productName+''/''+productVersion, durationInSeconds=900,rulesPackageArns=rules[''rulesPackageArns''])'
            - '        assessmentTemplateArn=template[''assessmentTemplateArn'']'
            - '        response = inspector.subscribe_to_event(event=''ASSESSMENT_RUN_COMPLETED'',resourceArn=template[''assessmentTemplateArn''],topicArn=topicArn)'
            - '        print("Template Created:"+template[''assessmentTemplateArn''])'
            - '        ParamName=''/GoldenAMI/''+productOS+''/''+productName+''/''+productVersion+''/assessmentTemplateARN'''
            - '        ssm.put_parameter(Name=ParamName,Value=template[''assessmentTemplateArn''],Type=''String'',Overwrite=True)'
            - '    else:'
            - '         assessmentTemplateArn=existingTemplates.get(''assessmentTemplateArns'')[0]'
            - '   '
            - '    time.sleep(10)'
            - '    run = inspector.start_assessment_run(assessmentTemplateArn=assessmentTemplateArn,assessmentRunName=fullName+"-"+str(millis))'
            - '    ParamName=''/GoldenAMI/''+productOS+''/''+productName+''/''+productVersion+''/LatestAssessmentRunARN'''
            - '    ssm.put_parameter(Name=ParamName,Value=run[''assessmentRunArn''],Type=''String'',Overwrite=True) '
            - '    return "Done"'
      Runtime: python3.6
      Timeout: 300
      Handler: index.lambda_handler
      MemorySize: 512
  AssessAssessmentLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AssessAssessmentLambdaExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'ssm:PutParameter'
                Resource: !Join
                  - ''
                  - - 'arn:aws:ssm:'
                    - '*'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':parameter/GoldenAMI/*'
              - Effect: Allow
                Action:
                  - 'inspector:DescribeAssessmentTemplates'
                  - 'inspector:DescribeFindings'
                  - 'inspector:ListFindings'
                Resource: '*'
  AssessAssessmentLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt
        - AssessAssessmentLambdaExecutionRole
        - Arn
      Code:
        ZipFile: !Join
          - |+

          - - 'import json '
            - import os
            - import boto3
            - 'def lambda_handler(event, context): '
            - '    message = event[''Records''][0][''Sns''][''Message'']'
            - '    print(message)'
            - '    jsonVal = json.loads(message);'
            - '    print(jsonVal)'
            - '    assessmentArn =jsonVal[''run'']'
            - '    template =jsonVal[''template'']'
            - '    region = os.environ["AWS_DEFAULT_REGION"]'
            - '    inspector = boto3.client(''inspector'',region) '
            - '    findingArns = inspector.list_findings(assessmentRunArns=[jsonVal[''run'']],maxResults=500)'
            - '    countInfo=0'
            - '    countHigh=0'
            - '    countMedium=0'
            - '    countLow=0'
            - '    for findingArn in findingArns[''findingArns'']:'
            - '        finding = inspector.describe_findings(findingArns=[findingArn]) '
            - '        for result in finding[''findings'']:'
            - '            if result[''severity''] ==''Informational'':'
            - '                countInfo=countInfo+1'
            - '            if result[''severity''] ==''Low'':'
            - '                countLow=countLow+1'
            - '            if result[''severity''] ==''Medium'':'
            - '                countMedium=countMedium+1'
            - '            if result[''severity''] ==''High'':'
            - '                countHigh=countHigh+1'
            - '    print("Total CVEs found:"+str(countHigh))'
            - '    existingTemplates = inspector.describe_assessment_templates( assessmentTemplateArns=[template])'
            - '    print( existingTemplates[''assessmentTemplates''][0][''name''])'
            - '    amiIdOriginal = existingTemplates[''assessmentTemplates''][0][''name''];'
            - '    index=int(amiIdOriginal.find(''/''))'
            - '    suffix= amiIdOriginal[index+1:]'
            - '    '
            - '    ssm = boto3.client(''ssm'',region) '
            - '    counts = "Inspector findings found: High["+str(countHigh)+"]"+", Medium["+str(countMedium)+"]"+", Low["+str(countLow)+"]"+", Info["+str(countInfo)+"]"'
            - '    '
            - '    ParamName=''/GoldenAMI/''+suffix+''/NumCVEs''  '
            - '    ssm.put_parameter(Name=ParamName,Value=counts,Type=''String'',Overwrite=True) '
            - '    '
            - '    ParamName=''/GoldenAMI/''+suffix+''/assessmentLink''  '
            - '    link=  "Link - https://"+region+".console.aws.amazon.com/inspector/home?region="+region+"#/run?filter={\"assessmentRunArns\":\""+assessmentArn+"\"}"'
            - '    ssm.put_parameter(Name=ParamName,Value=link,Type=''String'',Overwrite=True) '
            - '    return jsonVal[''run'']'
      Runtime: python3.6
      Timeout: 300
      Handler: index.lambda_handler
      MemorySize: 512
  LambdaInvokePermissionForAssessAssessment:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref InspectorCompleteTopic
      FunctionName: !GetAtt
        - AssessAssessmentLambdaFunction
        - Arn
  InspectorCompleteTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Id: MyTopicPolicy
        Version: 2012-10-17
        Statement:
          - Sid: inspector-notifications-policy
            Effect: Allow
            Principal:
              AWS:
                - 'arn:aws:iam::162588757376:root'
                - 'arn:aws:iam::526946625049:root'
                - 'arn:aws:iam::454640832652:root'
                - 'arn:aws:iam::406045910587:root'
                - 'arn:aws:iam::537503971621:root'
                - 'arn:aws:iam::357557129151:root'
                - 'arn:aws:iam::316112463485:root'
                - 'arn:aws:iam::646659390643:root'
                - 'arn:aws:iam::166987590008:root'
                - 'arn:aws:iam::758058086616:root'
            Action: 'sns:Publish'
            Resource: !Ref InspectorCompleteTopic
      Topics:
        - !Ref InspectorCompleteTopic
  InspectorCompleteTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !GetAtt
            - AssessAssessmentLambdaFunction
            - Arn
          Protocol: lambda
    DependsOn:
      - AssessAssessmentLambdaFunction
  ManagedInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
                - ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      Path: /
      Policies:
        - PolicyName: SamplePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Action:
                - 's3:*'
              Effect: Allow
              Resource:
                - !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref GoldenAMIConfigBucket
                - !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref GoldenAMIConfigBucket
                    - /*
  ManagedInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref ManagedInstanceRole
  AutomationServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
                - ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole'
      Path: /
      Policies:
        - PolicyName: passrole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource:
                  - !GetAtt
                    - ManagedInstanceRole
                    - Arn
        - PolicyName: describeInstance
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                Resource: '*'
        - PolicyName: invokeLambdaFunction
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource:
                  - !GetAtt
                    - RunInspectorLambdaFunction
                    - Arn
                  - !GetAtt
                    - AppendParamLambda
                    - Arn
                  - !GetAtt
                    - PublishAMILambda
                    - Arn
                  - !GetAtt
                    - DecommissionAMIVersionLambda
                    - Arn
                  - !GetAtt
                    - InitiateAssessmentLambda
                    - Arn
  GoldenAMIAutomationDoc:
    Type: 'AWS::SSM::Document'
    DependsOn:
      - InspectorCompleteTopic
    Properties:
      DocumentType: Automation
      Content:
        description: This automation document triggers Golden AMI creation workflow.
        schemaVersion: '0.3'
        assumeRole: !GetAtt
          - AutomationServiceRole
          - Arn
        parameters:
          sourceAMIid:
            type: String
            description: Source/Base AMI to be used for generating your golden AMI
            default: >-
              {{ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}
          productName:
            type: String
            description: The syntax of this parameter is ProductName-ProductVersion.
            default: !Ref productName
          productOSAndVersion:
            type: String
            description: The syntax of this parameter is OSName-OSVersion
            default: !Ref productOSAndVersion
          ApproverARN:
            type: String
            description: >-
              AWS authenticated principals who are able to either approve or
              reject the Golden AMI. You can specify principals by using an AWS
              Identity and Access Management (IAM) user name, IAM user ARN, IAM
              role ARN, or an IAM assume role user ARN.
            default: !Ref ApproverARN
          ApproverNotificationArn:
            type: String
            description: >-
              SNS Topic ARN on which a notification would be published once the
              golden AMI candidate is ready for validation.
            default: !Ref ApproverNotification
          AMIVersion:
            type: String
            description: Golden AMI Build version number to be created.
            default: !Ref buildVersion
          subnetId:
            type: String
            default: !Ref subnetPrivate
            description: Subnet in which instances will be launched.
          securityGroupId:
            type: String
            default: !Ref secGroup
            description: >-
              Security Group that will be attached to the instance. By Default a
              security group without any inbound access is attached
          instanceType:
            type: String
            description: A compatible instance-type for launching an instance
            default: !Ref instanceType
          targetAMIname:
            type: String
            description: Name for the golden AMI to be created
            default: '{{productName}}-{{productOSAndVersion}}-{{AMIVersion}}'
          ManagedInstanceProfile:
            type: String
            description: Instance Profile. Do not change the default value.
            default: !Ref ManagedInstanceProfile
          SSMInstallationUserData:
            type: String
            description: Base64 encoded SSM installation user-data.
            default: >-
              IyEvYmluL2Jhc2gNCg0KZnVuY3Rpb24gZ2V0X2NvbnRlbnRzKCkgew0KICAgIGlmIFsgLXggIiQod2hpY2ggY3VybCkiIF07IHRoZW4NCiAgICAgICAgY3VybCAtcyAtZiAiJDEiDQogICAgZWxpZiBbIC14ICIkKHdoaWNoIHdnZXQpIiBdOyB0aGVuDQogICAgICAgIHdnZXQgIiQxIiAtTyAtDQogICAgZWxzZQ0KICAgICAgICBkaWUgIk5vIGRvd25sb2FkIHV0aWxpdHkgKGN1cmwsIHdnZXQpIg0KICAgIGZpDQp9DQoNCnJlYWRvbmx5IElERU5USVRZX1VSTD0iaHR0cDovLzE2OS4yNTQuMTY5LjI1NC8yMDE2LTA2LTMwL2R5bmFtaWMvaW5zdGFuY2UtaWRlbnRpdHkvZG9jdW1lbnQvIg0KcmVhZG9ubHkgVFJVRV9SRUdJT049JChnZXRfY29udGVudHMgIiRJREVOVElUWV9VUkwiIHwgYXdrIC1GXCIgJy9yZWdpb24vIHsgcHJpbnQgJDQgfScpDQpyZWFkb25seSBERUZBVUxUX1JFR0lPTj0idXMtZWFzdC0xIg0KcmVhZG9ubHkgUkVHSU9OPSIke1RSVUVfUkVHSU9OOi0kREVGQVVMVF9SRUdJT059Ig0KDQpyZWFkb25seSBTQ1JJUFRfTkFNRT0iYXdzLWluc3RhbGwtc3NtLWFnZW50Ig0KIFNDUklQVF9VUkw9Imh0dHBzOi8vYXdzLXNzbS1kb3dubG9hZHMtJFJFR0lPTi5zMy5hbWF6b25hd3MuY29tL3NjcmlwdHMvJFNDUklQVF9OQU1FIg0KDQppZiBbICIkUkVHSU9OIiA9ICJjbi1ub3J0aC0xIiBdOyB0aGVuDQogIFNDUklQVF9VUkw9Imh0dHBzOi8vYXdzLXNzbS1kb3dubG9hZHMtJFJFR0lPTi5zMy5jbi1ub3J0aC0xLmFtYXpvbmF3cy5jb20uY24vc2NyaXB0cy8kU0NSSVBUX05BTUUiDQpmaQ0KDQppZiBbICIkUkVHSU9OIiA9ICJ1cy1nb3Ytd2VzdC0xIiBdOyB0aGVuDQogIFNDUklQVF9VUkw9Imh0dHBzOi8vYXdzLXNzbS1kb3dubG9hZHMtJFJFR0lPTi5zMy11cy1nb3Ytd2VzdC0xLmFtYXpvbmF3cy5jb20vc2NyaXB0cy8kU0NSSVBUX05BTUUiDQpmaQ0KDQpjZCAvdG1wDQpGSUxFX1NJWkU9MA0KTUFYX1JFVFJZX0NPVU5UPTMNClJFVFJZX0NPVU5UPTANCg0Kd2hpbGUgWyAkUkVUUllfQ09VTlQgLWx0ICRNQVhfUkVUUllfQ09VTlQgXSA7IGRvDQogIGVjaG8gQVdTLVVwZGF0ZUxpbnV4QW1pOiBEb3dubG9hZGluZyBzY3JpcHQgZnJvbSAkU0NSSVBUX1VSTA0KICBnZXRfY29udGVudHMgIiRTQ1JJUFRfVVJMIiA+ICIkU0NSSVBUX05BTUUiDQogIEZJTEVfU0laRT0kKGR1IC1rIC90bXAvJFNDUklQVF9OQU1FIHwgY3V0IC1mMSkNCiAgZWNobyBBV1MtVXBkYXRlTGludXhBbWk6IEZpbmlzaGVkIGRvd25sb2FkaW5nIHNjcmlwdCwgc2l6ZTogJEZJTEVfU0laRQ0KICBpZiBbICRGSUxFX1NJWkUgLWd0IDAgXTsgdGhlbg0KICAgIGJyZWFrDQogIGVsc2UNCiAgICBpZiBbWyAkUkVUUllfQ09VTlQgLWx0IE1BWF9SRVRSWV9DT1VOVCBdXTsgdGhlbg0KICAgICAgUkVUUllfQ09VTlQ9JCgoUkVUUllfQ09VTlQrMSkpOw0KICAgICAgZWNobyBBV1MtVXBkYXRlTGludXhBbWk6IEZpbGVTaXplIGlzIDAsIHJldHJ5Q291bnQ6ICRSRVRSWV9DT1VOVA0KICAgIGZpDQogIGZpIA0KZG9uZQ0KDQppZiBbICRGSUxFX1NJWkUgLWd0IDAgXTsgdGhlbg0KICBjaG1vZCAreCAiJFNDUklQVF9OQU1FIg0KICBlY2hvIEFXUy1VcGRhdGVMaW51eEFtaTogUnVubmluZyBVcGRhdGVTU01BZ2VudCBzY3JpcHQgbm93IC4uLi4NCiAgLi8iJFNDUklQVF9OQU1FIiAtLXJlZ2lvbiAiJFJFR0lPTiINCmVsc2UNCiAgZWNobyBBV1MtVXBkYXRlTGludXhBbWk6IFVuYWJsZSB0byBkb3dubG9hZCBzY3JpcHQsIHF1aXR0aW5nIC4uLi4NCmZp
          PreUpdateScript:
            type: String
            description: >-
              (Optional) URL of a script to run before updates are applied.
              Default ("none") is to not run a script.
            default: none
          PostUpdateScript:
            type: String
            description: >-
              (Optional) URL of a script to run after package updates are
              applied. Default ("none") is to not run a script.
            default: none
          IncludePackages:
            type: String
            description: >-
              (Optional) Only update these named packages. By default ("all"),
              all available updates are applied.
            default: all
          ExcludePackages:
            type: String
            description: >-
              (Optional) Names of packages to hold back from updates, under all
              conditions. By default ("none"), no package is excluded.
            default: none
        mainSteps:
          - name: startInstances
            action: 'aws:runInstances'
            timeoutSeconds: 3600
            maxAttempts: 1
            onFailure: Abort
            inputs:
              ImageId: '{{ sourceAMIid }}'
              InstanceType: '{{instanceType}}'
              MinInstanceCount: 1
              MaxInstanceCount: 1
              SubnetId: '{{ subnetId }}'
              SecurityGroupIds:
                - '{{ securityGroupId }}'
              UserData: '{{SSMInstallationUserData}}'
              IamInstanceProfileName: '{{ ManagedInstanceProfile }}'
          - name: updateSSMAgent
            action: 'aws:runCommand'
            maxAttempts: 3
            onFailure: Abort
            timeoutSeconds: 14400
            inputs:
              DocumentName: AWS-UpdateSSMAgent
              InstanceIds:
                - '{{ startInstances.InstanceIds }}'
          - name: describeInstance
            action: 'aws:executeAwsApi'
            onFailure: Abort
            inputs:
              Service: ec2
              Api: DescribeInstances
              InstanceIds:
                - '{{ startInstances.InstanceIds }}'
            outputs:
              - Name: Platform
                Selector: '$.Reservations[0].Instances[0].Platform'
                Type: String
            nextStep: branchOnInstancePlatform
          - name: branchOnInstancePlatform
            action: 'aws:branch'
            inputs:
              Choices:
                - NextStep: installWindowsUpdates
                  Variable: '{{ describeInstance.Platform }}'
                  StringEquals: windows
                - NextStep: updateOSSoftware
                  Variable: '{{ describeInstance.Platform }}'
                  StringEquals: linux
              Default: updateOSSoftware
          - name: installWindowsUpdates
            action: 'aws:runCommand'
            maxAttempts: 3
            onFailure: Abort
            timeoutSeconds: 14400
            inputs:
              DocumentName: AWS-InstallWindowsUpdates
              InstanceIds:
                - '{{ startInstances.InstanceIds }}'
            nextStep: stopInstance
          - name: updateOSSoftware
            action: 'aws:runCommand'
            maxAttempts: 3
            timeoutSeconds: 3600
            onFailure: Abort
            inputs:
              DocumentName: AWS-RunShellScript
              InstanceIds:
                - '{{startInstances.InstanceIds}}'
              Parameters:
                commands:
                  - set -e
                  - '[ -x "$(which wget)" ] && get_contents=''wget $1 -O -'''
                  - '[ -x "$(which curl)" ] && get_contents=''curl -s -f $1'''
                  - >-
                    eval $get_contents
                    https://aws-ssm-downloads-{{global:REGION}}.s3.amazonaws.com/scripts/aws-update-linux-instance
                    > /tmp/aws-update-linux-instance
                  - chmod +x /tmp/aws-update-linux-instance
                  - >-
                    /tmp/aws-update-linux-instance --pre-update-script
                    '{{PreUpdateScript}}' --post-update-script
                    '{{PostUpdateScript}}' --include-packages
                    '{{IncludePackages}}' --exclude-packages
                    '{{ExcludePackages}}' 2>&1 | tee
                    /tmp/aws-update-linux-instance.log
            nextStep: stopInstance
          - name: stopInstance
            action: 'aws:changeInstanceState'
            timeoutSeconds: 1200
            maxAttempts: 1
            onFailure: Abort
            inputs:
              InstanceIds:
                - '{{ startInstances.InstanceIds }}'
              DesiredState: stopped
          - name: createImage
            action: 'aws:createImage'
            timeoutSeconds: 1200
            maxAttempts: 1
            onFailure: Continue
            inputs:
              InstanceId: '{{ startInstances.InstanceIds }}'
              ImageName: '{{ targetAMIname }}'
              NoReboot: true
              ImageDescription: AMI created by EC2 Automation
          - name: TagTheAMI
            action: 'aws:createTags'
            timeoutSeconds: 1200
            maxAttempts: 1
            onFailure: Continue
            inputs:
              ResourceType: EC2
              ResourceIds:
                - '{{ createImage.ImageId }}'
              Tags:
                - Key: ProductOSAndVersion
                  Value: '{{productOSAndVersion}}'
                - Key: ProductName
                  Value: '{{productName}}'
                - Key: version
                  Value: '{{AMIVersion}}'
                - Key: AMI-Type
                  Value: Golden
          - name: terminateFirstInstance
            action: 'aws:changeInstanceState'
            timeoutSeconds: 1200
            maxAttempts: 1
            onFailure: Continue
            inputs:
              InstanceIds:
                - '{{ startInstances.InstanceIds }}'
              DesiredState: terminated
          - name: createInstanceFromNewImage
            action: 'aws:runInstances'
            timeoutSeconds: 1200
            maxAttempts: 1
            onFailure: Abort
            inputs:
              ImageId: '{{ createImage.ImageId }}'
              InstanceType: '{{instanceType}}'
              MinInstanceCount: 1
              MaxInstanceCount: 1
              SubnetId: '{{ subnetId }}'
              SecurityGroupIds:
                - '{{ securityGroupId }}'
              IamInstanceProfileName: '{{ ManagedInstanceProfile }}'
          - name: InstallInspector
            action: 'aws:runCommand'
            maxAttempts: 3
            timeoutSeconds: 3600
            onFailure: Abort
            inputs:
              DocumentName: AmazonInspector-ManageAWSAgent
              InstanceIds:
                - '{{ createInstanceFromNewImage.InstanceIds }}'
              Parameters:
                Operation: Install
          - name: TagNewinstance
            action: 'aws:createTags'
            timeoutSeconds: 1200
            maxAttempts: 1
            onFailure: Continue
            inputs:
              ResourceType: EC2
              ResourceIds:
                - '{{ createInstanceFromNewImage.InstanceIds }}'
              Tags:
                - Key: Type
                  Value: >-
                    {{createImage.ImageId}}-{{productOSAndVersion}}/{{productName}}/{{AMIVersion}}
                - Key: Automation-Instance-Type
                  Value: Golden
          - name: InspectBaseInstance
            action: 'aws:invokeLambdaFunction'
            maxAttempts: 3
            timeoutSeconds: 120
            onFailure: Abort
            inputs:
              FunctionName: !Ref RunInspectorLambdaFunction
              Payload: !Join
                - ''
                - - '{"AMI-ID": "{{createImage.ImageId}}","topicArn":"'
                  - !Ref InspectorCompleteTopic
                  - >-
                    ","instanceId": "{{ createInstanceFromNewImage.InstanceIds
                    }}","productOS": "{{productOSAndVersion}}","productName":
                    "{{productName}}","productVersion": "{{AMIVersion}}"}
          - name: sleep
            action: 'aws:sleep'
            inputs:
              Duration: PT2M
          - name: terminateInspectorInstance
            action: 'aws:changeInstanceState'
            timeoutSeconds: 1200
            maxAttempts: 1
            onFailure: Continue
            inputs:
              InstanceIds:
                - '{{ createInstanceFromNewImage.InstanceIds }}'
              DesiredState: terminated
          - name: addNewVersionParameter
            action: 'aws:invokeLambdaFunction'
            timeoutSeconds: 1200
            maxAttempts: 1
            onFailure: Abort
            inputs:
              FunctionName: !Ref AppendParamLambda
              Payload: >-
                {"parameterName":"/GoldenAMI/{{productOSAndVersion}}/{{productName}}/{{AMIVersion}}",
                "valueToBeCreatedOrAppended":"{{createImage.ImageId}}"}
          - name: approve
            action: 'aws:approve'
            timeoutSeconds: 172800
            onFailure: Abort
            inputs:
              NotificationArn: '{{ ApproverNotificationArn }}'
              Message: >-
                Please check contents of SSM Parameter :
                /GoldenAMI/{{productOSAndVersion}}/{{productName}}/{{AMIVersion}}/NumCVEs
                and approve/deny the build.
              MinRequiredApprovals: 1
              Approvers:
                - '{{ ApproverARN }}'
          - name: updateLatestVersionValue
            action: 'aws:invokeLambdaFunction'
            timeoutSeconds: 1200
            maxAttempts: 1
            onFailure: Abort
            inputs:
              FunctionName: !Ref AppendParamLambda
              Payload: >-
                {"parameterName":"/GoldenAMI/latest",
                "valueToBeCreatedOrAppended":"{{createImage.ImageId}}"}
        outputs:
          - createImage.ImageId
  DecommissionAMIVersion:
    Type: 'AWS::SSM::Document'
    Properties:
      DocumentType: Automation
      Content:
        description: >-
          This automation document triggers golden AMI build decommissioning
          workflow
        schemaVersion: '0.3'
        assumeRole: !GetAtt
          - AutomationServiceRole
          - Arn
        parameters:
          bucketName:
            type: String
            description: >-
              This parameter contains name of the bucket in which CFT template
              file is stored
            default: !Ref GoldenAMIConfigBucket
          templateFileName:
            type: String
            description: >-
              The CFT template file-name used for creating the Service Catalog
              product
            default: simpleEC2-SSMParamInput.json
          productName:
            type: String
            description: The syntax of this parameter is ProductName-ProductVersion
            default: !Ref productName
          productOSAndVersion:
            type: String
            description: The syntax of this parameter is OSName-OSVersion
            default: !Ref productOSAndVersion
          buildVersion:
            type: String
            description: Golden AMI build number to be decommissioned.
            default: !Ref buildVersion
          MetadataParamName:
            type: String
            description: >-
              This parameter points to an SSM parameter used for storing some
              process specific metadata. Do not change the default value.
            default: >-
              /GoldenAMI/{{productOSAndVersion}}/{{productName}}/{{buildVersion}}/temp
        mainSteps:
          - name: DecommissionAMIVersionLambda
            action: 'aws:invokeLambdaFunction'
            timeoutSeconds: 1200
            maxAttempts: 1
            onFailure: Abort
            inputs:
              FunctionName: !Ref DecommissionAMIVersionLambda
              Payload: >-
                {"bucketName":"{{ bucketName }}",
                "amiRegionMappingParamName":"{{ MetadataParamName }}",
                "templateFileName":"{{templateFileName}}",
                "versionToBeDeleted":"{{ buildVersion }}",
                "productOSAndVersion":"{{ productOSAndVersion }}",
                "productNameAndVersion":"{{ productName }}"}
  InitiateAssessmentLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonEC2FullAccess'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: InitiateAssessmentLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter*'
                  - 'ssm:PutParameter*'
                Resource: !Join
                  - ''
                  - - 'arn:aws:ssm:'
                    - '*'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':parameter/GoldenAMI/*'
              - Action: 'ssm:SendCommand'
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:ssm:'
                      - !Ref 'AWS::Region'
                      - '::document/AmazonInspector-ManageAWSAgent'
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':instance/*'
              - Effect: Allow
                Action:
                  - 'inspector:ListAssessmentTemplates'
                  - 'inspector:StartAssessmentRun'
                Resource: '*'
  InitiateAssessmentLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt
        - InitiateAssessmentLambdaRole
        - Arn
      Code:
        ZipFile: !Join
          - ''
          - - import boto3
            - |+

            - import json
            - |+

            - from dateutil import parser
            - |+

            - import dateutil
            - |+

            - import datetime
            - |+

            - import collections
            - |+

            - import os
            - |+

            - import time
            - |+

            - import botocore
            - |+

            - 'def lambda_handler(event, context):'
            - |+

            - '    region=os.environ[''AWS_DEFAULT_REGION'']'
            - |+

            - '    ssm = boto3.client(''ssm'',region)'
            - |+

            - '    instanceIDsVal = event[''instanceIDs'']'
            - |+

            - '    instanceIDs = instanceIDsVal.split('','')'
            - |+

            - '    for id in instanceIDs:'
            - |+

            - '        ssm.send_command(InstanceIds=[id], DocumentName=''AmazonInspector-ManageAWSAgent'',Parameters={''Operation'': [ ''Install'']})'
            - |+

            - '    inspector = boto3.client(''inspector'',region)'
            - |+

            - '    time.sleep(120)'
            - |+

            - '    millis = int(round(time.time() * 1000))'
            - |+

            - '    existingTemplates = inspector.list_assessment_templates(filter={''namePattern'': ''ContinuousAssessment''})'
            - |+

            - '    assessmentTemplateArn=existingTemplates.get(''assessmentTemplateArns'')[0]'
            - |+

            - '    run = inspector.start_assessment_run(assessmentTemplateArn=assessmentTemplateArn,assessmentRunName=''ContinuousAssessment''+''-''+str(millis))'
            - |+

            - '    return ''Done'''
      Runtime: python3.6
      Timeout: 300
      Handler: index.lambda_handler
      MemorySize: 512
  RunContinuousInspection:
    Type: 'AWS::SSM::Document'
    Properties:
      DocumentType: Automation
      Content:
        description: >-
          This automation document is triggered as part of the continuous
          vulnerability assessment on all active golden AMIs.
        schemaVersion: '0.3'
        assumeRole: !GetAtt
          - AutomationServiceRole
          - Arn
        parameters:
          instanceIDs:
            type: String
            description: >-
              This parameter contains list of instance-ids on which continuous
              vulnerability assessment is  performed.
        mainSteps:
          - name: sleep
            action: 'aws:sleep'
            inputs:
              Duration: PT6M
          - name: InitiateAssessmentLambdaFunction
            action: 'aws:invokeLambdaFunction'
            timeoutSeconds: 1200
            maxAttempts: 1
            onFailure: Abort
            inputs:
              FunctionName: !Ref InitiateAssessmentLambda
              Payload: '{"instanceIDs":"{{ instanceIDs }}"}'
  ContinuousAssessmentResourceGroup:
    Type: 'AWS::Inspector::ResourceGroup'
    Properties:
      ResourceGroupTags:
        - Key: continuous-assessment-instance
          Value: 'true'
  ContinuousAssessmentTarget:
    Type: 'AWS::Inspector::AssessmentTarget'
    Properties:
      ResourceGroupArn: !Ref ContinuousAssessmentResourceGroup
  ScheduledRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: ScheduledRule
      ScheduleExpression: !Ref continuousInspectionFrequency
      State: ENABLED
      Targets:
        - Arn: !GetAtt
            - SetupContinuousAssessmentLambdaFunction
            - Arn
          Id: TargetFunctionV1
          Input: !Join
            - ''
            - - '{"AMIsParamName":"/GoldenAMI/'
              - latest
              - '", "instanceType":"'
              - !Ref instanceType
              - '"}'
  PermissionForEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref SetupContinuousAssessmentLambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - ScheduledRule
        - Arn
  StartContinuousAssessmentLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonInspectorFullAccess'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: StartContinuousAssessmentLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: StartContinuousAssessmentLambdaPolicyStmt
                Effect: Allow
                Action:
                  - 'ssm:GetParameter'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:ssm:'
                      - '*'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':parameter/GoldenAMI/*'
        - PolicyName: StartContinuousAssessmentLambdaPolicy2
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: StartContinuousAssessmentLambdaPolicyStmt2
                Effect: Allow
                Action:
                  - 'ec2:DescribeImages'
                Resource:
                  - '*'
              - Effect: Allow
                Action: 'iam:PassRole'
                Resource:
                  - !GetAtt
                    - ManagedInstanceRole
                    - Arn
              - Effect: Allow
                Action: 'ssm:StartAutomationExecution'
                Resource: !Join
                  - ''
                  - - 'arn:aws:ssm:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':automation-definition/'
                    - !Ref RunContinuousInspection
                    - ':*'
              - Effect: Allow
                Action:
                  - 'ec2:CopyImage'
                  - 'ec2:DescribeImages'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ec2:createTags'
                Resource: '*'
                Condition:
                  'ForAllValues:StringEquals':
                    'aws:TagKeys':
                      - AMI-Type
                      - ProductName
                      - continuous-assessment-instance
                      - ProductOSAndVersion
                      - version
              - Effect: Allow
                Action:
                  - 'ec2:AssociateIamInstanceProfile'
                Resource:
                  - !GetAtt
                    - ManagedInstanceProfile
                    - Arn
              - Effect: Allow
                Action: 'ec2:RunInstances'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - '::image/ami-*'
                Condition:
                  StringEquals:
                    'ec2:ResourceTag/AMI-Type': Golden
              - Effect: Allow
                Action: 'ec2:RunInstances'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':instance/*'
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':subnet/*'
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':volume/*'
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':network-interface/*'
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':key-pair/*'
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':security-group/*'
  SetupContinuousAssessmentLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt
        - StartContinuousAssessmentLambdaRole
        - Arn
      Code:
        ZipFile: !Join
          - ''
          - - |+

            - import json
            - |+

            - import urllib.parse
            - |+

            - import boto3
            - |+

            - import time
            - |+

            - import os
            - |+

            - 'def lambda_handler(event, context):'
            - |+

            - '    amisParamName = event[''AMIsParamName''];'
            - |+

            - '    instanceType = event[''instanceType''];'
            - |+

            - '    region=os.environ[''AWS_DEFAULT_REGION'']'
            - |+

            - '    ec2 = boto3.client(''ec2'',region)'
            - |+

            - '    ssm = boto3.client(''ssm'',region)'
            - |+

            - '    inspector = boto3.client(''inspector'',region)'
            - |+

            - '    amisJson =  ssm.get_parameter(Name=amisParamName)[''Parameter''][''Value'']'
            - |+

            - '    items = amisJson.split('','')'
            - |+

            - '    instanceIDs = '''''
            - |+

            - '    for entry in items:'
            - |+

            - '        images= ec2.describe_images(ImageIds=[entry],DryRun=False)'
            - |+

            - '        if ''Tags'' in images[''Images''][0]:'
            - |+

            - '            tags = images[''Images''][0][''Tags'']'
            - |+

            - '            tags.append({''Key'': ''continuous-assessment-instance'', ''Value'': ''true''})'
            - |+

            - '            response = ec2.run_instances(ImageId=entry,SubnetId='''
            - !Ref subnetPrivate
            - ''',IamInstanceProfile={''Arn'':'''
            - !GetAtt
              - ManagedInstanceProfile
              - Arn
            - '''},SecurityGroupIds=['''
            - !Ref secGroup
            - >-
              '],InstanceType=instanceType,DryRun=False,MaxCount=1,MinCount=1,TagSpecifications=[{'ResourceType':
              'instance','Tags': tags}])
            - |+

            - '        else:'
            - |+

            - '            response = ec2.run_instances(ImageId=entry,SubnetId='''
            - !Ref subnetPrivate
            - ''',IamInstanceProfile={''Arn'':'''
            - !GetAtt
              - ManagedInstanceProfile
              - Arn
            - '''}, SecurityGroupIds=['''
            - !Ref secGroup
            - >-
              '],InstanceType=instanceType,DryRun=False,MaxCount=1,MinCount=1,TagSpecifications=[{'ResourceType':
              'instance','Tags': [{'Key': 'continuous-assessment-instance',
              'Value': 'true'},{'Key': 'AMI-Type', 'Value': 'Golden'}]}])
            - |+

            - '        if len(instanceIDs)==0:'
            - |+

            - '            instanceIDs=response[''Instances''][0][''InstanceId'']'
            - |+

            - '        else:'
            - |+

            - '            instanceIDs=instanceIDs+'',''+response[''Instances''][0][''InstanceId'']'
            - |+

            - '    assessmentTemplateArn='''';'
            - |+

            - '    rules = inspector.list_rules_packages();'
            - |+

            - '    '
            - |+

            - '    millis = int(round(time.time() * 1000))'
            - |+

            - '    existingTemplates = inspector.list_assessment_templates(filter={''namePattern'': ''ContinuousAssessment''})'
            - |+

            - '    print(''Total templates found:''+str(len(existingTemplates[''assessmentTemplateArns''])))'
            - |+

            - '    if len(existingTemplates[''assessmentTemplateArns''])==0:'
            - |+

            - '        template = inspector.create_assessment_template(assessmentTargetArn='''
            - !Ref ContinuousAssessmentTarget
            - >-
              ',assessmentTemplateName='ContinuousAssessment',
              durationInSeconds=3600,rulesPackageArns=rules['rulesPackageArns'])
            - |+

            - '        assessmentTemplateArn=template[''assessmentTemplateArn'']'
            - |+

            - '        response = inspector.subscribe_to_event(event=''ASSESSMENT_RUN_COMPLETED'',resourceArn=template[''assessmentTemplateArn''],topicArn='''
            - !Ref ContinuousAssessmentCompleteTopic
            - ''') '
            - |+

            - '        print(''Template Created:''+template[''assessmentTemplateArn''])'
            - |+

            - '        time.sleep(20)'
            - |+

            - '    ssm.start_automation_execution(DocumentName='''
            - !Ref RunContinuousInspection
            - ''', Parameters={''instanceIDs'': [instanceIDs]})'
            - |+

            - '    return ''Assessment started'''
      Runtime: python3.6
      Timeout: 300
      Handler: index.lambda_handler
      MemorySize: 512
  ContinuousAssessmentResultsTopic:
    Type: 'AWS::SNS::Topic'
  ContinuousAssessmentResultsTopicSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !Ref EmailID
      Protocol: email
      TopicArn: !Ref ContinuousAssessmentResultsTopic
  ContinuousAssessmentCompleteTopicSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt
        - AnalyzeInspectorFindingsLambdaFunction
        - Arn
      Protocol: lambda
      TopicArn: !Ref ContinuousAssessmentCompleteTopic
  ContinuousAssessmentCompleteTopic:
    Type: 'AWS::SNS::Topic'
  ContinuousAssessmentCompleteTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Id: MyTopicPolicy
        Version: 2012-10-17
        Statement:
          - Sid: My-statement-id
            Effect: Allow
            Principal:
              Service: inspector.amazonaws.com
            Action: 'sns:Publish'
            Resource: !Ref ContinuousAssessmentCompleteTopic
      Topics:
        - !Ref ContinuousAssessmentCompleteTopic
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref ContinuousAssessmentCompleteTopic
      FunctionName: !GetAtt
        - AnalyzeInspectorFindingsLambdaFunction
        - Arn
  AnalyzeInspectorFindingsLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AnalyzeInspectorFindingsLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AnalyzeInspectorFindingsLambdaPolicyStmt
                Effect: Allow
                Action:
                  - 'inspector:AddAttributesToFindings'
                  - 'inspector:DescribeFindings'
                  - 'ec2:DescribeInstances'
                  - 'inspector:ListFindings'
                Resource:
                  - '*'
              - Sid: AnalyzeInspectorFindingsLambdaPolicyStmt2
                Effect: Allow
                Action: 'sns:Publish'
                Resource: !Ref ContinuousAssessmentResultsTopic
              - Sid: AnalyzeInspectorFindingsLambdaPolicyStmt3
                Effect: Allow
                Action:
                  - 'ec2:TerminateInstances'
                Resource:
                  - '*'
                Condition:
                  StringEquals:
                    'ec2:ResourceTag/continuous-assessment-instance': 'true'
  AnalyzeInspectorFindingsLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt
        - AnalyzeInspectorFindingsLambdaRole
        - Arn
      Code:
        ZipFile: !Join
          - ''
          - - |+

            - 'import json '
            - |+

            - import os
            - |+

            - import boto3
            - |+

            - import collections
            - |+

            - import ast
            - |+

            - 'def lambda_handler(event, context): '
            - |+

            - '    message = event[''Records''][0][''Sns''][''Message''] '
            - |+

            - '    jsonVal = json.loads(message);'
            - |+

            - '    assessmentArn =jsonVal[''run'']  '
            - |+

            - '    region=os.environ[''AWS_DEFAULT_REGION'']'
            - |+

            - '    ec2 = boto3.client(''ec2'',region) '
            - |+

            - '    sns = boto3.client(''sns'',region) '
            - |+

            - '    inspector = boto3.client(''inspector'',region) '
            - |+

            - '    findingArns = inspector.list_findings(assessmentRunArns=[jsonVal[''run'']],maxResults=5000)'
            - |+

            - '    aggregateData={}'
            - |+

            - '    for findingArn in findingArns[''findingArns'']:'
            - |+

            - '        finding = inspector.describe_findings(findingArns=[findingArn]) '
            - |+

            - '        for result in finding[''findings'']: '
            - |+

            - '            instanceId =result[''assetAttributes''][''agentId'']'
            - |+

            - '            severity =result[''severity'']'
            - |+

            - '            cveName=result[''id'']'
            - |+

            - '            if not (instanceId) in aggregateData:'
            - |+

            - '                aggregateData[instanceId]={}'
            - |+

            - '                aggregateData[instanceId][''findings'']={}'
            - |+

            - '                aggregateData[instanceId][''findings''][severity]=0'
            - |+

            - '                instance=ec2.describe_instances(InstanceIds=[instanceId]);'
            - |+

            - '                tagsStr=str(instance[''Reservations''][0][''Instances''][0][''Tags'']) '
            - |+

            - '                tagsStr =tagsStr.replace(''Key'',''key'').replace(''Value'',''value'')  '
            - |+

            - '                aggregateData[instanceId][''tags'']= ast.literal_eval(tagsStr)'
            - |+

            - '            elif not (severity) in aggregateData[instanceId][''findings'']:'
            - |+

            - '                aggregateData[instanceId][''findings''][severity]=0'
            - |+

            - '            aggregateData[instanceId][''findings''][severity]=aggregateData[instanceId][''findings''][severity]+1; '
            - |+

            - '            inspector.add_attributes_to_findings(findingArns=[result[''arn'']],attributes=aggregateData[instanceId][''tags''])'
            - |+

            - '    tagsList=[]'
            - |+

            - '    for key  in aggregateData: '
            - |+

            - '        outputJson=[] '
            - |+

            - '        for tag in aggregateData[key][''tags'']:'
            - |+

            - '            if tag[''key''] != ''continuous-assessment-instance'':'
            - |+

            - '                outputJson.append("\""+tag[''key'']+"\""+":"+"\""+tag[''value'']+"\"")'
            - |+

            - '        for sev in aggregateData[key][''findings'']:'
            - |+

            - '            outputJson.append("\"Finding-Severity-"+sev+"-Count\""+":"+"\""+str(aggregateData[key][''findings''][sev])+"\"")'
            - |+

            - '        outputJson.sort()'
            - |+

            - '        print(outputJson)'
            - |+

            - '        tagsList.append(''{''+'', ''.join(outputJson)+''}'')'
            - |+

            - '        print(''Terminating:''+key)'
            - |+

            - '        ec2.terminate_instances(InstanceIds=[key],DryRun=False)'
            - |+

            - '    sns.publish(TopicArn='''
            - !Ref ContinuousAssessmentResultsTopic
            - ''',Message=''[''+'', ''.join(tagsList)+'']'')'
            - |+

            - '    return jsonVal[''run'']'
      Runtime: python3.6
      Timeout: 300
      Handler: index.lambda_handler
      MemorySize: 512
Outputs:
  BucketName:
    Description: >-
      The Name of the bucket created. Please upload template file in this
      bucket.
    Value: !Ref GoldenAMIConfigBucket
  GoldenAMIAutomationDoc:
    Description: The Name of the document that creates Golden AMI and executes Inspector.
    Value: !Ref GoldenAMIAutomationDoc
  SetupContinuousAssessmentLambdaFunction:
    Description: The Lambda function that initiates the vulnerability assessment.
    Value: !Ref SetupContinuousAssessmentLambdaFunction
  DecommissionAMIVersionDoc:
    Description: The Name of the document that decomissions a golden AMI version.
    Value: !Ref DecommissionAMIVersion
  ContinuousInspectionScheduledRule:
    Description: >-
      The Cloudwatch rule that executes the continuous inspection at the rate
      you specified.
    Value: !Ref ScheduledRule
  ContinuousAssessmentResultsTopic:
    Description: The SNS topic on which consolidated results are published
    Value: !Ref ContinuousAssessmentResultsTopic
