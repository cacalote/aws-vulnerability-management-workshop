import boto3
import jmespath
import os
import logging
import time
import datetime
import sys

from boto3.dynamodb.conditions import Attr
from botocore.exceptions import ClientError

logger = logging.getLogger()
logger.setLevel(logging.INFO)
dynamodb_table_name = 'AutoTag-ASGInfo'

ec2 = boto3.resource('ec2')
dynamodb = boto3.resource('dynamodb')
ec2_client = boto3.client('ec2')

def lambda_handler(event, context):
    global username
    ids = []
    try:
        source = event['source']
        detail = event['detail']
        detailtype = event['detail-type']
        print('Received event from ' + source + ' with detail-type as: ' + detailtype);
        ## Check if event is from Auto scaling and handle it accordingly.
        if (source == 'aws.autoscaling'):
            table = dynamodb.Table(dynamodb_table_name)
            if (detailtype == 'EC2 Instance Launch Successful'):
                asgName = detail['AutoScalingGroupName']
                instanceId = detail['EC2InstanceId']
                instanceIds = ''
                ## Look up user info from ASG Table based on ASG name
                print('Looking up user info for Auto scaling group: ' + asgName)
                response = table.get_item(
                    Key={
                        'asgName': asgName,
                    },
                    ConsistentRead=True
                )
                if ('Item' in response):
                    item = response['Item']
                    if ('userName' in item):
                        username = item['userName']
                        ids.append(instanceId)
                        logger.info(ids)
                        instances = ec2.instances.filter(InstanceIds=ids)
                        # loop through the instance volumes and network interfaces
                        for instance in instances:
                            for vol in instance.volumes.all():
                                ids.append(vol.id)
                            for eni in instance.network_interfaces:
                                ids.append(eni.id)
                        if ids:
                            for resourceid in ids:
                                print('Tagging resource ' + resourceid + ' with Owner as ' + username)
                            ec2.create_tags(Resources=ids,
                                            Tags=[{'Key': 'Owner', 'Value': username}])
                            return True
                    else:
                        print('User info could not be found in ASG table.. storing instanceId info to tag later')
                        if ('instanceInfo' in item):
                            instanceIds = item['instanceInfo'] + ',' + instanceId
                else:
                    instanceIds = instanceId
                ## store AutoScaling group name along with instance id information to tag later
                try:
                    table.put_item(
                        Item={
                            'asgName': asgName,
                            'instanceInfo': instanceIds,
                        }
                    )
                except ClientError as e:
                    print('Error storing ASG info in dynamo table for ASG: ' + str(asgName))
                    raise
                return True
            elif (detailtype == 'AWS API Call via CloudTrail'):
                eventname = detail['eventName']
                if (eventname == 'CreateAutoScalingGroup'):
                    principal = detail['userIdentity']['principalId']
                    userType = detail['userIdentity']['type']
                    user = None
                    if userType == 'IAMUser':
                        user = detail['userIdentity']['userName']
                    else:
                        if (':' in principal):
                            user = principal.split(':')[1]
                    if (user is None):
                        logger.info('User info could not be found in event details, Exiting...')
                        return True
                    asgName = detail['requestParameters']['autoScalingGroupName']
                    ## store AutoScaling group name in dynamo table along with user info to look up later
                    try:
                        response = table.put_item(
                            Item={
                                'asgName': asgName,
                                'userName': user,
                            },
                            ReturnValues="ALL_OLD"
                        )
                        if ('Attributes' in response):
                            attributes = response['Attributes']
                            if ('instanceInfo' in attributes):
                                print('ASG table contained untagged instances. Tagging them now..')
                                instanceIds = attributes['instanceInfo']
                                if (',' in instanceIds):
                                    ids = instanceIds.split(',')
                                else:
                                    ids.append(instanceIds)
                                instances = ec2.instances.filter(InstanceIds=ids)
                                # loop through the instance volumes and network interfaces
                                for instance in instances:
                                    for vol in instance.volumes.all():
                                        ids.append(vol.id)
                                    for eni in instance.network_interfaces:
                                        ids.append(eni.id)
                                if ids:
                                    for resourceid in ids:
                                        print('Tagging resource ' + resourceid + ' with Owner as ' + user)
                                    ec2.create_tags(Resources=ids,
                                                    Tags=[{'Key': 'Owner', 'Value': user}])
                                    return True
                    except ClientError as e:
                        print('Error storing ASG info in dynamo table for ASG: ' + str(asgName))
                        raise
                elif (eventname == 'DeleteAutoScalingGroup'):
                    asgName = detail['requestParameters']['autoScalingGroupName']
                    print('Deleting ASG info in dynamo table for ASG: ' + str(asgName))
                    ## store ASG name in dynamo table along with user info to look up later
                    try:
                        response = table.delete_item(
                            Key={ 'asgName': asgName }
                        )
                    except ClientError as e:
                        print('Error deleting ASG info in dynamo table for ASG: ' + str(asgName))
                        raise
                else:
                    logger.info('Not supported Auto scaling API Call')
            else:
                logger.info('Not supported Auto scaling action')
        else:
            ## Handle API Event generated by EC2
            eventname = detail['eventName']
            arn = detail['userIdentity']['arn']
            principal = detail['userIdentity']['principalId']
            userType = detail['userIdentity']['type']
            user = None
            logger.info('principalId: ' + str(principal))
            logger.info('eventName: ' + str(eventname))
            logger.info('detail: ' + str(detail))
            if userType == 'IAMUser':
                user = detail['userIdentity']['userName']
            else:
                if (':' in principal):
                    user = principal.split(':')[1]
            if (user is None):
                logger.info('User info could not be found in principal : ' + str(principal))
                logger.info('Exiting...')
                return True
            if not detail['responseElements']:
                logger.warning('No responseElements found')
                if detail['errorCode']:
                    logger.error('errorCode: ' + detail['errorCode'])
                if detail['errorMessage']:
                    logger.error('errorMessage: ' + detail['errorMessage'])
                return False
            if eventname == 'CreateVolume':
                ids.append(detail['responseElements']['volumeId'])
                logger.info(ids)
            elif eventname == 'RunInstances':
                items = detail['responseElements']['instancesSet']['items']
                for item in items:
                    ids.append(item['instanceId'])
                logger.info(ids)
                logger.info('number of instances: ' + str(len(ids)))
                base = ec2.instances.filter(InstanceIds=ids)
                # loop through the instances
                for instance in base:
                    for vol in instance.volumes.all():
                        ids.append(vol.id)
                    for eni in instance.network_interfaces:
                        ids.append(eni.id)
            elif eventname == 'CreateImage':
                ids.append(detail['responseElements']['imageId'])
                logger.info(ids)
            elif eventname == 'CreateSnapshot':
                ids.append(detail['responseElements']['snapshotId'])
                logger.info(ids)
            else:
                logger.warning('Not supported action')
            if ids:
                for resourceid in ids:
                    print('Tagging resource ' + resourceid)
                    if resourceid.startswith('i-'):
                        ec2response = ec2_client.describe_instances(InstanceIds=[resourceid])
                        platform = jmespath.search(
                            "Reservations[].Instances[?InstanceId=='{}'].Platform|[][][]|[0]".format(resourceid),
                            ec2response
                        )
                        logger.debug("Instance platform: {}".format(platform))
                        if platform == 'windows':
                            ec2.create_tags(Resources=[resourceid], Tags=[{'Key': 'Owner', 'Value': user}, {'Key': 'PrincipalId', 'Value': principal}, {'Key': 'OSType', 'Value': 'Windows'}])
                        elif platform != 'windows':
                            ec2.create_tags(Resources=[resourceid], Tags=[{'Key': 'Owner', 'Value': user}, {'Key': 'PrincipalId', 'Value': principal}, {'Key': 'OSType', 'Value': 'Linux'}])
                    else:
                        ec2.create_tags(Resources=[resourceid], Tags=[{'Key': 'Owner', 'Value': user}, {'Key': 'PrincipalId', 'Value': principal}])
        logger.info(' Remaining time (ms): ' + str(context.get_remaining_time_in_millis()) + '\n')
        return True
    except Exception as e:
        logger.error('Something went wrong: ' + str(e))
        logger.error('Error on line {}'.format(sys.exc_info()[-1].tb_lineno))
        return False
